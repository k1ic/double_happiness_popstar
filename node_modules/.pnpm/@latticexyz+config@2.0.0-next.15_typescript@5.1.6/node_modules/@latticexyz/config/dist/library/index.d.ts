import { z, ZodError, RefinementCtx } from 'zod';
import { M as MUDConfigExtender } from '../dynamicResolution-d10c23a8.js';
export { c as DynamicResolution, D as DynamicResolutionType, b as MUDCoreConfig, a as MUDCoreUserConfig, V as ValueWithType, e as extendMUDCoreConfig, i as isDynamicResolution, m as mudCoreConfig, r as resolveTableId, d as resolveWithContext } from '../dynamicResolution-d10c23a8.js';
import * as zod_validation_error from 'zod-validation-error';

/** Capitalized names of objects, like tables and systems */
declare const zObjectName: z.ZodEffects<z.ZodString, string, string>;
/** Uncapitalized names of values, like keys and columns */
declare const zValueName: z.ZodEffects<z.ZodString, string, string>;
/** Name that can start with any case */
declare const zName: z.ZodEffects<z.ZodString, string, string>;
/** A namespace */
declare const zNamespace: z.ZodEffects<z.ZodString, string, string>;
/** List of unique enum member names and 0 < length < 256 */
declare const zUserEnum: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>;
/** Ordinary routes */
declare const zOrdinaryRoute: z.ZodEffects<z.ZodString, string, string>;
/** Routes with exactly 1 non-empty level */
declare const zSingleLevelRoute: z.ZodEffects<z.ZodString, string, string>;
/** Base routes (can be an empty string) */
declare const zBaseRoute: z.ZodEffects<z.ZodString, string, string>;
/** A valid Ethereum address */
declare const zEthereumAddress: z.ZodEffects<z.ZodString, string, string>;

type GlobalWithMUDCoreContext = typeof global & {
    __mudCoreContext: MUDCoreContext;
};
declare class MUDCoreContext {
    static _global: typeof globalThis;
    static isCreated(): boolean;
    static createContext(): MUDCoreContext;
    static getContext(): MUDCoreContext;
    readonly configExtenders: MUDConfigExtender[];
}

declare class MUDContextAlreadyCreatedError extends Error {
    name: string;
    message: string;
}
declare class MUDContextNotCreatedError extends Error {
    name: string;
    message: string;
}
declare function fromZodErrorCustom(error: ZodError, prefix: string): zod_validation_error.ValidationError;
declare class NotInsideProjectError extends Error {
    name: string;
    message: string;
}
declare function UnrecognizedSystemErrorFactory(path: string[], systemName: string): z.ZodError<any>;

declare const STORE_NAME_MAX_LENGTH = 16;
declare const STORE_NAMESPACE_MAX_LENGTH = 14;
declare function validateName(name: string, ctx: RefinementCtx): void;
declare function validateCapitalizedName(name: string, ctx: RefinementCtx): void;
declare function validateUncapitalizedName(name: string, ctx: RefinementCtx): void;
declare function validateEnum(members: string[], ctx: RefinementCtx): void;
declare const validateRoute: (route: string, ctx: RefinementCtx) => void;
declare const validateBaseRoute: (route: string, ctx: RefinementCtx) => void;
declare const validateSingleLevelRoute: (route: string, ctx: RefinementCtx) => void;
declare function validateEthereumAddress(address: string, ctx: RefinementCtx): void;
declare function getDuplicates<T>(array: T[]): T[];
declare function validateNamespace(name: string, ctx: RefinementCtx): void;
/** Returns null if the type does not look like a static array, otherwise element and length data */
declare function parseStaticArray(abiType: string): {
    elementType: string;
    staticLength: number;
} | null;

export { GlobalWithMUDCoreContext, MUDConfigExtender, MUDContextAlreadyCreatedError, MUDContextNotCreatedError, MUDCoreContext, NotInsideProjectError, STORE_NAMESPACE_MAX_LENGTH, STORE_NAME_MAX_LENGTH, UnrecognizedSystemErrorFactory, fromZodErrorCustom, getDuplicates, parseStaticArray, validateBaseRoute, validateCapitalizedName, validateEnum, validateEthereumAddress, validateName, validateNamespace, validateRoute, validateSingleLevelRoute, validateUncapitalizedName, zBaseRoute, zEthereumAddress, zName, zNamespace, zObjectName, zOrdinaryRoute, zSingleLevelRoute, zUserEnum, zValueName };
