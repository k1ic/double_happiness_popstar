interface MUDCoreUserConfig {
}
interface MUDCoreConfig {
}
type MUDConfigExtender = (config: MUDCoreConfig) => Record<string, unknown>;
/** Resolver that sequentially passes the config through all the plugins */
declare function mudCoreConfig(config: MUDCoreUserConfig): MUDCoreConfig;
/** Utility for plugin developers to extend the core config */
declare function extendMUDCoreConfig(extender: MUDConfigExtender): void;

declare enum DynamicResolutionType {
    TABLE_ID = 0,
    SYSTEM_ADDRESS = 1
}
type DynamicResolution = {
    type: DynamicResolutionType;
    input: string;
};
type ValueWithType = {
    value: string | number | Uint8Array;
    type: string;
};
/**
 * Dynamically resolve a table name to a table id at deploy time
 */
declare function resolveTableId(tableName: string): {
    type: DynamicResolutionType;
    input: string;
};
/** Type guard for DynamicResolution */
declare function isDynamicResolution(value: unknown): value is DynamicResolution;
/**
 * Turn a DynamicResolution object into a ValueWithType based on the provided context
 */
declare function resolveWithContext(unresolved: any, context: {
    systemAddresses?: Record<string, Promise<string>>;
    tableIds?: Record<string, Uint8Array>;
}): ValueWithType;

export { DynamicResolutionType as D, MUDConfigExtender as M, ValueWithType as V, MUDCoreUserConfig as a, MUDCoreConfig as b, DynamicResolution as c, resolveWithContext as d, extendMUDCoreConfig as e, isDynamicResolution as i, mudCoreConfig as m, resolveTableId as r };
