import * as _latticexyz_store_register from '@latticexyz/store/register';

declare const _default: _latticexyz_store_register.ExpandMUDUserConfig<{
    worldgenDirectory: string;
    worldInterfaceName: string;
    codegenDirectory: string;
    userTypes: {
        ResourceId: {
            filePath: string;
            internalType: "bytes32";
        };
    };
    tables: {
        /************************************************************************
         *
         *    KEYS WITH VALUE MODULE
         *
         ************************************************************************/
        KeysWithValue: {
            directory: string;
            keySchema: {
                valueHash: "bytes32";
            };
            valueSchema: {
                keysWithValue: "bytes32[]";
            };
            tableIdArgument: true;
            storeArgument: true;
        };
        /************************************************************************
         *
         *    KEYS IN TABLE MODULE
         *
         ************************************************************************/
        KeysInTable: {
            directory: string;
            keySchema: {
                sourceTableId: "ResourceId";
            };
            valueSchema: {
                keys0: "bytes32[]";
                keys1: "bytes32[]";
                keys2: "bytes32[]";
                keys3: "bytes32[]";
                keys4: "bytes32[]";
            };
            storeArgument: true;
        };
        UsedKeysIndex: {
            directory: string;
            keySchema: {
                sourceTableId: "ResourceId";
                keysHash: "bytes32";
            };
            valueSchema: {
                has: "bool";
                index: "uint40";
            };
            dataStruct: false;
            storeArgument: true;
        };
        /************************************************************************
         *
         *    UNIQUE ENTITY MODULE
         *
         ************************************************************************/
        UniqueEntity: {
            directory: string;
            keySchema: {};
            valueSchema: "uint256";
            tableIdArgument: true;
            storeArgument: true;
        };
        /************************************************************************
         *
         *    STD DELEGATIONS MODULE
         *
         ************************************************************************/
        CallboundDelegations: {
            directory: string;
            keySchema: {
                delegator: "address";
                delegatee: "address";
                systemId: "ResourceId";
                callDataHash: "bytes32";
            };
            valueSchema: {
                availableCalls: "uint256";
            };
        };
        SystemboundDelegations: {
            directory: string;
            keySchema: {
                delegator: "address";
                delegatee: "address";
                systemId: "ResourceId";
            };
            valueSchema: {
                availableCalls: "uint256";
            };
        };
        TimeboundDelegations: {
            directory: string;
            keySchema: {
                delegator: "address";
                delegatee: "address";
            };
            valueSchema: {
                maxTimestamp: "uint256";
            };
        };
        /************************************************************************
         *
         *    PUPPET MODULE
         *
         ************************************************************************/
        PuppetRegistry: {
            directory: string;
            keySchema: {
                systemId: "ResourceId";
            };
            valueSchema: {
                puppet: "address";
            };
            tableIdArgument: true;
        };
        /************************************************************************
         *
         *    TOKEN TABLES (SHARED BY ERC20, ERC721)
         *
         ************************************************************************/
        Balances: {
            directory: string;
            keySchema: {
                account: "address";
            };
            valueSchema: {
                value: "uint256";
            };
            tableIdArgument: true;
        };
        /************************************************************************
         *
         *    ERC20 MODULE
         *
         ************************************************************************/
        ERC20Metadata: {
            directory: string;
            keySchema: {};
            valueSchema: {
                decimals: "uint8";
                name: "string";
                symbol: "string";
            };
            tableIdArgument: true;
        };
        Allowances: {
            directory: string;
            keySchema: {
                account: "address";
                spender: "address";
            };
            valueSchema: {
                value: "uint256";
            };
            tableIdArgument: true;
        };
        TotalSupply: {
            directory: string;
            keySchema: {};
            valueSchema: {
                totalSupply: "uint256";
            };
            tableIdArgument: true;
        };
        ERC20Registry: {
            directory: string;
            keySchema: {
                namespaceId: "ResourceId";
            };
            valueSchema: {
                tokenAddress: "address";
            };
            tableIdArgument: true;
        };
        /************************************************************************
         *
         *    ERC721 MODULE
         *
         ************************************************************************/
        ERC721Metadata: {
            directory: string;
            keySchema: {};
            valueSchema: {
                name: "string";
                symbol: "string";
                baseURI: "string";
            };
            tableIdArgument: true;
        };
        TokenURI: {
            directory: string;
            keySchema: {
                tokenId: "uint256";
            };
            valueSchema: {
                tokenURI: "string";
            };
            tableIdArgument: true;
        };
        Owners: {
            directory: string;
            keySchema: {
                tokenId: "uint256";
            };
            valueSchema: {
                owner: "address";
            };
            tableIdArgument: true;
        };
        TokenApproval: {
            directory: string;
            keySchema: {
                tokenId: "uint256";
            };
            valueSchema: {
                account: "address";
            };
            tableIdArgument: true;
        };
        OperatorApproval: {
            directory: string;
            keySchema: {
                owner: "address";
                operator: "address";
            };
            valueSchema: {
                approved: "bool";
            };
            tableIdArgument: true;
        };
        ERC721Registry: {
            directory: string;
            keySchema: {
                namespaceId: "ResourceId";
            };
            valueSchema: {
                tokenAddress: "address";
            };
            tableIdArgument: true;
        };
    };
    excludeSystems: string[];
}>;

export { _default as default };
