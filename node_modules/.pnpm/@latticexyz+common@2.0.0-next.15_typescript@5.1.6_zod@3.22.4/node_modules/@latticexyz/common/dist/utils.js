function a(e,r){throw new Error(r??`Unexpected value: ${e}`)}function i(...e){return e.reduce((r,t)=>t>r?t:r)}function f(...e){return e.reduce((r,t)=>t<r?t:r)}function m(e,r){return e<r?-1:e>r?1:0}function*y(e,r){for(let t=0;t<e.length;t+=r)yield e.slice(t,t+r)}function x(e,...r){return(...t)=>e(...r,...t)}function v(e,r){let t=new Map;for(let n of e){let o=r(n);t.has(o)||t.set(o,[]),t.get(o).push(n)}return t}function T(e){return e}function k(e,r){return e.includes(r)}function w(e){return e!==void 0}function h(e){return e!==null}async function I(e){let r=[];for await(let t of e)r.push(t);return r}function R(e,r){return Object.fromEntries(Object.entries(e).map(([t,n])=>[t,r(n,t)]))}function C(e){return Array.from(new Set(e))}function q(e,r){let t=new Map;for(let n of e)t.set(r(n),n);return Array.from(t.values())}function O(e){return new Promise(r=>setTimeout(()=>r(),e))}function N(){return new Promise(e=>{requestIdleCallback(()=>e())})}export{a as assertExhaustive,i as bigIntMax,f as bigIntMin,m as bigIntSort,y as chunk,x as curry,v as groupBy,T as identity,k as includes,w as isDefined,h as isNotNull,I as iteratorToArray,R as mapObject,C as unique,q as uniqueBy,O as wait,N as waitForIdle};
//# sourceMappingURL=utils.js.map