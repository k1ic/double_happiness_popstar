import { AbiType, StaticArray } from '@latticexyz/schema-type/deprecated';

type RequireKeys<T extends Record<string, unknown>, P extends string> = T & Required<Pick<T, P>>;
type StringForUnion = string & Record<never, never>;
type AsDependent<T> = T extends infer P ? P : never;
type OrDefault<T, Default> = T extends undefined ? Default : T;
type OrDefaults<T extends object, Defaults> = {
    [key in keyof Defaults]: key extends keyof T ? OrDefault<T[key], Defaults[key]> : Defaults[key];
};
type UnionOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;
type UnionKeys<T> = T extends any ? keyof T : never;
type UnionPick<T, K extends UnionKeys<T>> = T extends any ? Pick<T, Extract<K, keyof T>> : never;
type ReverseMap<T extends Record<any, any>> = {
    [K in keyof T as T[K]]: K;
};

type ExtractUserTypes<UnknownTypes extends StringForUnion> = Exclude<UnknownTypes, AbiType | StaticArray>;

export { AsDependent, ExtractUserTypes, OrDefault, OrDefaults, RequireKeys, ReverseMap, StringForUnion, UnionKeys, UnionOmit, UnionPick };
