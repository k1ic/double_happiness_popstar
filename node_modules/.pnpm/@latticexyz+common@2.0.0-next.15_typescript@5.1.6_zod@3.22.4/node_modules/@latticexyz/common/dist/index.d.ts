import { Hex, Account, Client, BlockTag, WriteContractParameters, Transport, Address, Abi, Chain, PublicClient, WalletClient, GetContractParameters, GetContractReturnType, SendTransactionParameters, WriteContractReturnType } from 'viem';
import PQueue from 'p-queue';

declare const resourceTypes: readonly ["table", "offchainTable", "namespace", "module", "system"];
type ResourceType = (typeof resourceTypes)[number];

type Resource = {
    resourceId: Hex;
    type: ResourceType;
    namespace: string;
    name: string;
};

declare function createBenchmark(namespace: string): (stepName: string) => void;

declare function createBurnerAccount(privateKey: Hex): Account;

type CreateNonceManagerOptions = {
    client: Client;
    address: Hex;
    blockTag?: BlockTag;
    broadcastChannelName?: string;
};
type CreateNonceManagerResult = {
    hasNonce: () => boolean;
    nextNonce: () => number;
    resetNonce: () => Promise<void>;
    shouldResetNonce: (error: unknown) => boolean;
    mempoolQueue: PQueue;
};
declare function createNonceManager({ client, address, // TODO: rename to account?
blockTag, broadcastChannelName, }: CreateNonceManagerOptions): CreateNonceManagerResult;

type ContractWrite = {
    id: string;
    request: WriteContractParameters;
    result: Promise<Hex>;
};
type GetContractOptions<TTransport extends Transport, TAddress extends Address, TAbi extends Abi, TChain extends Chain, TAccount extends Account, TPublicClient extends PublicClient<TTransport, TChain>, TWalletClient extends WalletClient<TTransport, TChain, TAccount>> = Required<GetContractParameters<TTransport, TChain, TAccount, TAbi, TPublicClient, TWalletClient, TAddress>> & {
    onWrite?: (write: ContractWrite) => void;
};
declare function getContract<TTransport extends Transport, TAddress extends Address, TAbi extends Abi, TChain extends Chain, TAccount extends Account, TPublicClient extends PublicClient<TTransport, TChain>, TWalletClient extends WalletClient<TTransport, TChain, TAccount>>({ abi, address, publicClient, walletClient, onWrite, }: GetContractOptions<TTransport, TAddress, TAbi, TChain, TAccount, TPublicClient, TWalletClient>): GetContractReturnType<TAbi, TPublicClient, TWalletClient, TAddress>;

declare function getBurnerPrivateKey(cacheKey?: string): Hex;

declare function getNonceManager({ client, address, // TODO: rename to account?
blockTag, }: CreateNonceManagerOptions): Promise<CreateNonceManagerResult>;

declare function getNonceManagerId({ client, address, blockTag, }: {
    client: Client;
    address: Hex;
    blockTag: BlockTag;
}): Promise<string>;

declare function hexToResource(hex: Hex): Resource;

/**
 * Get the hex value at start/end positions. This will always return a valid hex string.
 *
 * If `start` is out of range, this returns `"0x"`.
 *
 * If `end` is specified and out of range, the result is right zero-padded to the desired length (`end - start`).
 */
declare function readHex(data: Hex, start: number, end?: number): Hex;

/** @internal */
declare const resourceTypeIds: {
    readonly table: "tb";
    readonly offchainTable: "ot";
    readonly namespace: "ns";
    readonly module: "md";
    readonly system: "sy";
};
declare function resourceToHex(resource: Omit<Resource, "resourceId">): Hex;

type Result<Ok, Err = unknown> = {
    ok: Ok;
} | {
    error: Err;
};
declare function isOk<Ok, Err>(result: Result<Ok, Err>): result is {
    ok: Ok;
};
declare function isError<Ok, Err>(result: Result<Ok, Err>): result is {
    error: Err;
};
declare function unwrap<Ok, Err>(result: Result<Ok, Err>): Ok;

declare function sendTransaction<TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined>(client: Client<Transport, TChain, TAccount>, request: SendTransactionParameters<TChain, TAccount, TChainOverride>): Promise<WriteContractReturnType>;

declare function spliceHex(data: Hex, start: number, deleteCount?: number, newData?: Hex): Hex;

declare function transportObserver<TTransport extends Transport>(transport: TTransport): TTransport;

declare function writeContract<TChain extends Chain | undefined, TAccount extends Account | undefined, TAbi extends Abi | readonly unknown[], TFunctionName extends string, TChainOverride extends Chain | undefined>(client: Client<Transport, TChain, TAccount>, request: WriteContractParameters<TAbi, TFunctionName, TChain, TAccount, TChainOverride>): Promise<WriteContractReturnType>;

/** @deprecated use `getContract` instead */
declare const createContract: typeof getContract;

/** @deprecated use `resourceToHex` instead */
declare const resourceIdToHex: typeof resourceToHex;

/** @deprecated use `hexToResource` instead */
declare const hexToResourceId: typeof hexToResource;

export { ContractWrite, CreateNonceManagerOptions, CreateNonceManagerResult, GetContractOptions, Resource, ResourceType, Result, createBenchmark, createBurnerAccount, createContract, createNonceManager, getBurnerPrivateKey, getContract, getNonceManager, getNonceManagerId, hexToResource, hexToResourceId, isError, isOk, readHex, resourceIdToHex, resourceToHex, resourceTypeIds, resourceTypes, sendTransaction, spliceHex, transportObserver, unwrap, writeContract };
