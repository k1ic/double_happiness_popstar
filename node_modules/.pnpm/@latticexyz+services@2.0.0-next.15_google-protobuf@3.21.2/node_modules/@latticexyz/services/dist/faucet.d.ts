import { CallContext, CallOptions } from 'nice-grpc-common';
import _m0 from 'protobufjs/minimal.js';
import { RawClient } from 'nice-grpc-web';
import { FromTsProtoServiceDefinition } from 'nice-grpc-web/lib/service-definitions/ts-proto';

declare const protobufPackage = "faucet";
interface LinkedTwitterPair {
    username: string;
    address: string;
}
declare const LinkedTwitterPair: {
    encode(message: LinkedTwitterPair, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedTwitterPair;
    create(base?: DeepPartial<LinkedTwitterPair>): LinkedTwitterPair;
    fromPartial(object: DeepPartial<LinkedTwitterPair>): LinkedTwitterPair;
};
interface FaucetStore {
    addressToUsername: {
        [key: string]: string;
    };
    usernameToAddress: {
        [key: string]: string;
    };
    /** User id/name/address to timestamp of latest drip. */
    latestDrip: {
        [key: string]: number;
    };
    /** Global drip counter. */
    totalDripCount: number;
}
declare const FaucetStore: {
    encode(message: FaucetStore, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FaucetStore;
    create(base?: DeepPartial<FaucetStore>): FaucetStore;
    fromPartial(object: DeepPartial<FaucetStore>): FaucetStore;
};
interface FaucetStore_AddressToUsernameEntry {
    key: string;
    value: string;
}
declare const FaucetStore_AddressToUsernameEntry: {
    encode(message: FaucetStore_AddressToUsernameEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FaucetStore_AddressToUsernameEntry;
    create(base?: DeepPartial<FaucetStore_AddressToUsernameEntry>): FaucetStore_AddressToUsernameEntry;
    fromPartial(object: DeepPartial<FaucetStore_AddressToUsernameEntry>): FaucetStore_AddressToUsernameEntry;
};
interface FaucetStore_UsernameToAddressEntry {
    key: string;
    value: string;
}
declare const FaucetStore_UsernameToAddressEntry: {
    encode(message: FaucetStore_UsernameToAddressEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FaucetStore_UsernameToAddressEntry;
    create(base?: DeepPartial<FaucetStore_UsernameToAddressEntry>): FaucetStore_UsernameToAddressEntry;
    fromPartial(object: DeepPartial<FaucetStore_UsernameToAddressEntry>): FaucetStore_UsernameToAddressEntry;
};
interface FaucetStore_LatestDripEntry {
    key: string;
    value: number;
}
declare const FaucetStore_LatestDripEntry: {
    encode(message: FaucetStore_LatestDripEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FaucetStore_LatestDripEntry;
    create(base?: DeepPartial<FaucetStore_LatestDripEntry>): FaucetStore_LatestDripEntry;
    fromPartial(object: DeepPartial<FaucetStore_LatestDripEntry>): FaucetStore_LatestDripEntry;
};
/** Request for drip. */
interface DripRequest {
    username: string;
    address: string;
}
declare const DripRequest: {
    encode(message: DripRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DripRequest;
    create(base?: DeepPartial<DripRequest>): DripRequest;
    fromPartial(object: DeepPartial<DripRequest>): DripRequest;
};
/** Request for drip to any address when running in dev mode. */
interface DripDevRequest {
    address: string;
}
declare const DripDevRequest: {
    encode(message: DripDevRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DripDevRequest;
    create(base?: DeepPartial<DripDevRequest>): DripDevRequest;
    fromPartial(object: DeepPartial<DripDevRequest>): DripDevRequest;
};
/** Response for drip request that contains the transaction hash of the drip tx and the ECS component set hash (if any). */
interface DripResponse {
    dripTxHash: string;
    ecsTxHash: string;
}
declare const DripResponse: {
    encode(message: DripResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DripResponse;
    create(base?: DeepPartial<DripResponse>): DripResponse;
    fromPartial(object: DeepPartial<DripResponse>): DripResponse;
};
/** Response for the time until next drip request. */
interface TimeUntilDripResponse {
    timeUntilDripMinutes: number;
    timeUntilDripSeconds: number;
}
declare const TimeUntilDripResponse: {
    encode(message: TimeUntilDripResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TimeUntilDripResponse;
    create(base?: DeepPartial<TimeUntilDripResponse>): TimeUntilDripResponse;
    fromPartial(object: DeepPartial<TimeUntilDripResponse>): TimeUntilDripResponse;
};
interface GetLinkedTwittersRequest {
}
declare const GetLinkedTwittersRequest: {
    encode(_: GetLinkedTwittersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetLinkedTwittersRequest;
    create(base?: DeepPartial<GetLinkedTwittersRequest>): GetLinkedTwittersRequest;
    fromPartial(_: DeepPartial<GetLinkedTwittersRequest>): GetLinkedTwittersRequest;
};
interface GetLinkedTwittersResponse {
    linkedTwitters: LinkedTwitterPair[];
}
declare const GetLinkedTwittersResponse: {
    encode(message: GetLinkedTwittersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetLinkedTwittersResponse;
    create(base?: DeepPartial<GetLinkedTwittersResponse>): GetLinkedTwittersResponse;
    fromPartial(object: DeepPartial<GetLinkedTwittersResponse>): GetLinkedTwittersResponse;
};
interface LinkedTwitterForAddressRequest {
    address: string;
}
declare const LinkedTwitterForAddressRequest: {
    encode(message: LinkedTwitterForAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedTwitterForAddressRequest;
    create(base?: DeepPartial<LinkedTwitterForAddressRequest>): LinkedTwitterForAddressRequest;
    fromPartial(object: DeepPartial<LinkedTwitterForAddressRequest>): LinkedTwitterForAddressRequest;
};
interface LinkedTwitterForAddressResponse {
    username: string;
}
declare const LinkedTwitterForAddressResponse: {
    encode(message: LinkedTwitterForAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedTwitterForAddressResponse;
    create(base?: DeepPartial<LinkedTwitterForAddressResponse>): LinkedTwitterForAddressResponse;
    fromPartial(object: DeepPartial<LinkedTwitterForAddressResponse>): LinkedTwitterForAddressResponse;
};
interface LinkedAddressForTwitterRequest {
    username: string;
}
declare const LinkedAddressForTwitterRequest: {
    encode(message: LinkedAddressForTwitterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedAddressForTwitterRequest;
    create(base?: DeepPartial<LinkedAddressForTwitterRequest>): LinkedAddressForTwitterRequest;
    fromPartial(object: DeepPartial<LinkedAddressForTwitterRequest>): LinkedAddressForTwitterRequest;
};
interface LinkedAddressForTwitterResponse {
    address: string;
}
declare const LinkedAddressForTwitterResponse: {
    encode(message: LinkedAddressForTwitterResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedAddressForTwitterResponse;
    create(base?: DeepPartial<LinkedAddressForTwitterResponse>): LinkedAddressForTwitterResponse;
    fromPartial(object: DeepPartial<LinkedAddressForTwitterResponse>): LinkedAddressForTwitterResponse;
};
interface SetLinkedTwitterRequest {
    address: string;
    username: string;
    signature: string;
}
declare const SetLinkedTwitterRequest: {
    encode(message: SetLinkedTwitterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetLinkedTwitterRequest;
    create(base?: DeepPartial<SetLinkedTwitterRequest>): SetLinkedTwitterRequest;
    fromPartial(object: DeepPartial<SetLinkedTwitterRequest>): SetLinkedTwitterRequest;
};
interface SetLinkedTwitterResponse {
}
declare const SetLinkedTwitterResponse: {
    encode(_: SetLinkedTwitterResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetLinkedTwitterResponse;
    create(base?: DeepPartial<SetLinkedTwitterResponse>): SetLinkedTwitterResponse;
    fromPartial(_: DeepPartial<SetLinkedTwitterResponse>): SetLinkedTwitterResponse;
};
/** The Faucet Service definition. */
type FaucetServiceDefinition = typeof FaucetServiceDefinition;
declare const FaucetServiceDefinition: {
    readonly name: "FaucetService";
    readonly fullName: "faucet.FaucetService";
    readonly methods: {
        readonly drip: {
            readonly name: "Drip";
            readonly requestType: {
                encode(message: DripRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DripRequest;
                create(base?: DeepPartial<DripRequest>): DripRequest;
                fromPartial(object: DeepPartial<DripRequest>): DripRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: DripResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DripResponse;
                create(base?: DeepPartial<DripResponse>): DripResponse;
                fromPartial(object: DeepPartial<DripResponse>): DripResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly dripDev: {
            readonly name: "DripDev";
            readonly requestType: {
                encode(message: DripDevRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DripDevRequest;
                create(base?: DeepPartial<DripDevRequest>): DripDevRequest;
                fromPartial(object: DeepPartial<DripDevRequest>): DripDevRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: DripResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DripResponse;
                create(base?: DeepPartial<DripResponse>): DripResponse;
                fromPartial(object: DeepPartial<DripResponse>): DripResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly dripVerifyTweet: {
            readonly name: "DripVerifyTweet";
            readonly requestType: {
                encode(message: DripRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DripRequest;
                create(base?: DeepPartial<DripRequest>): DripRequest;
                fromPartial(object: DeepPartial<DripRequest>): DripRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: DripResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DripResponse;
                create(base?: DeepPartial<DripResponse>): DripResponse;
                fromPartial(object: DeepPartial<DripResponse>): DripResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly timeUntilDrip: {
            readonly name: "TimeUntilDrip";
            readonly requestType: {
                encode(message: DripRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DripRequest;
                create(base?: DeepPartial<DripRequest>): DripRequest;
                fromPartial(object: DeepPartial<DripRequest>): DripRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TimeUntilDripResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TimeUntilDripResponse;
                create(base?: DeepPartial<TimeUntilDripResponse>): TimeUntilDripResponse;
                fromPartial(object: DeepPartial<TimeUntilDripResponse>): TimeUntilDripResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getLinkedTwitters: {
            readonly name: "GetLinkedTwitters";
            readonly requestType: {
                encode(_: GetLinkedTwittersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetLinkedTwittersRequest;
                create(base?: DeepPartial<GetLinkedTwittersRequest>): GetLinkedTwittersRequest;
                fromPartial(_: DeepPartial<GetLinkedTwittersRequest>): GetLinkedTwittersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetLinkedTwittersResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetLinkedTwittersResponse;
                create(base?: DeepPartial<GetLinkedTwittersResponse>): GetLinkedTwittersResponse;
                fromPartial(object: DeepPartial<GetLinkedTwittersResponse>): GetLinkedTwittersResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getLinkedTwitterForAddress: {
            readonly name: "GetLinkedTwitterForAddress";
            readonly requestType: {
                encode(message: LinkedTwitterForAddressRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LinkedTwitterForAddressRequest;
                create(base?: DeepPartial<LinkedTwitterForAddressRequest>): LinkedTwitterForAddressRequest;
                fromPartial(object: DeepPartial<LinkedTwitterForAddressRequest>): LinkedTwitterForAddressRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LinkedTwitterForAddressResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LinkedTwitterForAddressResponse;
                create(base?: DeepPartial<LinkedTwitterForAddressResponse>): LinkedTwitterForAddressResponse;
                fromPartial(object: DeepPartial<LinkedTwitterForAddressResponse>): LinkedTwitterForAddressResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getLinkedAddressForTwitter: {
            readonly name: "GetLinkedAddressForTwitter";
            readonly requestType: {
                encode(message: LinkedAddressForTwitterRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LinkedAddressForTwitterRequest;
                create(base?: DeepPartial<LinkedAddressForTwitterRequest>): LinkedAddressForTwitterRequest;
                fromPartial(object: DeepPartial<LinkedAddressForTwitterRequest>): LinkedAddressForTwitterRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LinkedAddressForTwitterResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LinkedAddressForTwitterResponse;
                create(base?: DeepPartial<LinkedAddressForTwitterResponse>): LinkedAddressForTwitterResponse;
                fromPartial(object: DeepPartial<LinkedAddressForTwitterResponse>): LinkedAddressForTwitterResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Admin utility endpoints for modifying state. Requires a signature with faucet private key. */
        readonly setLinkedTwitter: {
            readonly name: "SetLinkedTwitter";
            readonly requestType: {
                encode(message: SetLinkedTwitterRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SetLinkedTwitterRequest;
                create(base?: DeepPartial<SetLinkedTwitterRequest>): SetLinkedTwitterRequest;
                fromPartial(object: DeepPartial<SetLinkedTwitterRequest>): SetLinkedTwitterRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: SetLinkedTwitterResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SetLinkedTwitterResponse;
                create(base?: DeepPartial<SetLinkedTwitterResponse>): SetLinkedTwitterResponse;
                fromPartial(_: DeepPartial<SetLinkedTwitterResponse>): SetLinkedTwitterResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface FaucetServiceImplementation<CallContextExt = {}> {
    drip(request: DripRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DripResponse>>;
    dripDev(request: DripDevRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DripResponse>>;
    dripVerifyTweet(request: DripRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DripResponse>>;
    timeUntilDrip(request: DripRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TimeUntilDripResponse>>;
    getLinkedTwitters(request: GetLinkedTwittersRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetLinkedTwittersResponse>>;
    getLinkedTwitterForAddress(request: LinkedTwitterForAddressRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LinkedTwitterForAddressResponse>>;
    getLinkedAddressForTwitter(request: LinkedAddressForTwitterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LinkedAddressForTwitterResponse>>;
    /** Admin utility endpoints for modifying state. Requires a signature with faucet private key. */
    setLinkedTwitter(request: SetLinkedTwitterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SetLinkedTwitterResponse>>;
}
interface FaucetServiceClient<CallOptionsExt = {}> {
    drip(request: DeepPartial<DripRequest>, options?: CallOptions & CallOptionsExt): Promise<DripResponse>;
    dripDev(request: DeepPartial<DripDevRequest>, options?: CallOptions & CallOptionsExt): Promise<DripResponse>;
    dripVerifyTweet(request: DeepPartial<DripRequest>, options?: CallOptions & CallOptionsExt): Promise<DripResponse>;
    timeUntilDrip(request: DeepPartial<DripRequest>, options?: CallOptions & CallOptionsExt): Promise<TimeUntilDripResponse>;
    getLinkedTwitters(request: DeepPartial<GetLinkedTwittersRequest>, options?: CallOptions & CallOptionsExt): Promise<GetLinkedTwittersResponse>;
    getLinkedTwitterForAddress(request: DeepPartial<LinkedTwitterForAddressRequest>, options?: CallOptions & CallOptionsExt): Promise<LinkedTwitterForAddressResponse>;
    getLinkedAddressForTwitter(request: DeepPartial<LinkedAddressForTwitterRequest>, options?: CallOptions & CallOptionsExt): Promise<LinkedAddressForTwitterResponse>;
    /** Admin utility endpoints for modifying state. Requires a signature with faucet private key. */
    setLinkedTwitter(request: DeepPartial<SetLinkedTwitterRequest>, options?: CallOptions & CallOptionsExt): Promise<SetLinkedTwitterResponse>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;

/**
 * Create a FaucetServiceClient
 * @param url FaucetService URL
 * @returns FaucetServiceClient
 */
declare function createFaucetService(url: string): RawClient<FromTsProtoServiceDefinition<typeof FaucetServiceDefinition>>;

export { DeepPartial, DripDevRequest, DripRequest, DripResponse, FaucetServiceClient, FaucetServiceDefinition, FaucetServiceImplementation, FaucetStore, FaucetStore_AddressToUsernameEntry, FaucetStore_LatestDripEntry, FaucetStore_UsernameToAddressEntry, GetLinkedTwittersRequest, GetLinkedTwittersResponse, LinkedAddressForTwitterRequest, LinkedAddressForTwitterResponse, LinkedTwitterForAddressRequest, LinkedTwitterForAddressResponse, LinkedTwitterPair, SetLinkedTwitterRequest, SetLinkedTwitterResponse, TimeUntilDripResponse, createFaucetService, protobufPackage };
