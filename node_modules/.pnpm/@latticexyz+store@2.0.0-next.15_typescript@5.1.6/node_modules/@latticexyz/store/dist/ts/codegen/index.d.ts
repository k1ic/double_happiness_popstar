import { ImportDatum, StaticResourceData, RenderKeyTuple, RenderField, RenderStaticField, RenderDynamicField, RenderType, SolidityUserDefinedType } from '@latticexyz/common/codegen';
import { S as StoreConfig } from '../../storeConfig-0ef26091.js';
import { SchemaType } from '@latticexyz/schema-type/deprecated';
import 'zod';
import '@latticexyz/common/type-utils';
import '@latticexyz/config';

interface RenderTableOptions {
    /** List of symbols to import, and their file paths */
    imports: ImportDatum[];
    /** Name of the library to render. */
    libraryName: string;
    /** Name of the struct to render. If undefined, struct and its methods aren't rendered. */
    structName?: string;
    /** Data used to statically registed the table. If undefined, all methods receive `_tableId` as an argument. */
    staticResourceData?: StaticResourceData;
    /** Path for store package imports */
    storeImportPath: string;
    keyTuple: RenderKeyTuple[];
    fields: RenderField[];
    staticFields: RenderStaticField[];
    dynamicFields: RenderDynamicField[];
    /** Whether to render getter functions */
    withGetters: boolean;
    /** Whether to render dynamic field methods (push, pop, update) */
    withDynamicFieldMethods: boolean;
    /** Whether to render get/set methods for the whole record */
    withRecordMethods: boolean;
    /** Whether to additionally render field methods without a field name suffix */
    withSuffixlessFieldMethods: boolean;
    /** Whether to render additional methods that accept a manual `IStore` argument */
    storeArgument: boolean;
}

declare function renderFieldMethods(options: RenderTableOptions): string;
declare function renderEncodeFieldSingle(field: RenderField): string;
declare function renderDecodeValueType(field: RenderType, offset: number): string;

declare function renderRecordMethods(options: RenderTableOptions): string;
declare function renderRecordData(options: RenderTableOptions, namePrefix?: string): string;
declare function renderDeleteRecordMethods(options: RenderTableOptions): string;

declare function renderTable(options: RenderTableOptions): string;

declare function renderTypesFromConfig(config: StoreConfig): string;

declare function tablegen(config: StoreConfig, outputBaseDirectory: string, remappings: [string, string][]): Promise<void>;

interface TableOptions {
    outputPath: string;
    tableName: string;
    renderOptions: RenderTableOptions;
}
declare function getTableOptions(config: StoreConfig, solidityUserTypes: Record<string, SolidityUserDefinedType>): TableOptions[];

declare function renderDecodeSlice(): string;

declare function renderEncodeArray(): string;

declare function renderTightCoderDecode(element: {
    internalTypeId: string;
    staticByteLength: number;
}): string;
declare function renderTightCoderEncode(element: {
    internalTypeId: string;
    staticByteLength: number;
}): string;

declare function renderTightCoderAutoTestFunction({ typeId }: {
    typeId: string;
}): string;
declare function renderTightCoderAutoTest(): string;

type UserTypeInfo = ReturnType<typeof getUserTypeInfo>;
/**
 * Resolve an abi or user type into a SchemaType and RenderType
 */
declare function resolveAbiOrUserType(abiOrUserType: string, config: StoreConfig, solidityUserTypes: Record<string, SolidityUserDefinedType>): {
    schemaType: SchemaType;
    renderType: RenderType;
};
/**
 * Get the required import for SchemaType|userType (`undefined` means that no import is required)
 */
declare function importForAbiOrUserType(abiOrUserType: string, usedInDirectory: string, config: StoreConfig, solidityUserTypes: Record<string, SolidityUserDefinedType>): ImportDatum | undefined;
declare function getSchemaTypeInfo(schemaType: SchemaType): RenderType;
declare function getUserTypeInfo(userType: string, config: StoreConfig, solidityUserTypes: Record<string, SolidityUserDefinedType>): {
    schemaType: SchemaType;
    renderType: RenderType;
};

export { RenderTableOptions, TableOptions, UserTypeInfo, getSchemaTypeInfo, getTableOptions, getUserTypeInfo, importForAbiOrUserType, renderDecodeSlice, renderDecodeValueType, renderDeleteRecordMethods, renderEncodeArray, renderEncodeFieldSingle, renderFieldMethods, renderRecordData, renderRecordMethods, renderTable, renderTightCoderAutoTest, renderTightCoderAutoTestFunction, renderTightCoderDecode, renderTightCoderEncode, renderTypesFromConfig, resolveAbiOrUserType, tablegen };
