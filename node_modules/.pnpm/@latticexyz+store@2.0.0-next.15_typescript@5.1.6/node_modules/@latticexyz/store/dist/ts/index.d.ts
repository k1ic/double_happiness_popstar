import { F as FieldData, a as FullSchemaConfig, S as StoreConfig } from '../storeConfig-0ef26091.js';
export { D as DEFAULTS, l as EnumsConfig, E as ExpandSchemaConfig, f as ExpandTableConfig, k as ExpandTablesConfig, m as FullEnumsConfig, e as FullTableConfig, j as FullTablesConfig, M as MUDUserConfig, P as PATH_DEFAULTS, c as SchemaConfig, b as ShorthandSchemaConfig, q as StoreUserConfig, T as TABLE_DEFAULTS, d as TableConfig, h as TablesConfig, U as UserTypesConfig, r as resolveUserTypes, n as zEnumsConfig, s as zPluginStoreConfig, z as zSchemaConfig, p as zStoreConfig, g as zTableConfig, i as zTablesConfig, o as zUserTypesConfig } from '../storeConfig-0ef26091.js';
export { R as ResolvedStoreConfig, r as resolveConfig } from '../resolveConfig-fb65b91f.js';
import { StaticAbiType, SchemaAbiType, SchemaAbiTypeToPrimitiveType } from '@latticexyz/schema-type';
import { Hex } from 'viem';
import '@latticexyz/schema-type/deprecated';
import 'zod';
import '@latticexyz/common/type-utils';
import '@latticexyz/config';
import '@latticexyz/common/codegen';

type KeySchema = {
    readonly [k: string]: {
        readonly type: StaticAbiType;
    };
};
type ValueSchema = {
    readonly [k: string]: {
        readonly type: SchemaAbiType;
    };
};
type Table = {
    readonly tableId: Hex;
    readonly namespace: string;
    readonly name: string;
    readonly keySchema: KeySchema;
    readonly valueSchema: ValueSchema;
};
type Tables = {
    readonly [k: string]: Table;
};
/** Map a table schema like `{ value: { type: "uint256" } }` to its primitive types like `{ value: bigint }` */
type SchemaToPrimitives<schema extends ValueSchema> = {
    readonly [key in keyof schema]: SchemaAbiTypeToPrimitiveType<schema[key]["type"]>;
};
type ConfigFieldTypeToSchemaAbiType<T extends FieldData<string>> = T extends SchemaAbiType ? T : T extends `${string}[${string}]` ? "uint8[]" : "uint8";
type ConfigFieldTypeToPrimitiveType<T extends FieldData<string>> = T extends SchemaAbiType ? SchemaAbiTypeToPrimitiveType<T> : T extends `${string}[${string}]` ? number[] : number;
/** Map a table schema config like `{ value: "uint256", type: "SomeEnum" }` to its primitive types like `{ value: bigint, type: number }` */
type SchemaConfigToPrimitives<T extends FullSchemaConfig> = {
    [key in keyof T]: ConfigFieldTypeToPrimitiveType<T[key]>;
};
type ConfigToTablesPrimitives<C extends StoreConfig> = {
    [key in keyof C["tables"]]: {
        key: SchemaConfigToPrimitives<C["tables"][key]["keySchema"]>;
        value: SchemaConfigToPrimitives<C["tables"][key]["valueSchema"]>;
    };
};
type ConfigToKeyPrimitives<C extends StoreConfig, Table extends keyof ConfigToTablesPrimitives<C>> = ConfigToTablesPrimitives<C>[Table]["key"];
type ConfigToValuePrimitives<C extends StoreConfig, Table extends keyof ConfigToTablesPrimitives<C>> = ConfigToTablesPrimitives<C>[Table]["value"];
type ConfigToRecordPrimitives<C extends StoreConfig, Table extends keyof ConfigToTablesPrimitives<C>> = {
    key: ConfigToKeyPrimitives<C, Table>;
    value: ConfigToValuePrimitives<C, Table>;
};

declare const helloStoreEvent = "event HelloStore(bytes32 indexed storeVersion)";
declare const storeSetRecordEvent = "event Store_SetRecord(bytes32 indexed tableId, bytes32[] keyTuple, bytes staticData, bytes32 encodedLengths, bytes dynamicData)";
declare const storeSpliceStaticDataEvent = "event Store_SpliceStaticData(bytes32 indexed tableId, bytes32[] keyTuple, uint48 start, bytes data)";
declare const storeSpliceDynamicDataEvent = "event Store_SpliceDynamicData(bytes32 indexed tableId, bytes32[] keyTuple, uint48 start, uint40 deleteCount, bytes32 encodedLengths, bytes data)";
declare const storeDeleteRecordEvent = "event Store_DeleteRecord(bytes32 indexed tableId, bytes32[] keyTuple)";
declare const storeEvents: readonly ["event Store_SetRecord(bytes32 indexed tableId, bytes32[] keyTuple, bytes staticData, bytes32 encodedLengths, bytes dynamicData)", "event Store_SpliceStaticData(bytes32 indexed tableId, bytes32[] keyTuple, uint48 start, bytes data)", "event Store_SpliceDynamicData(bytes32 indexed tableId, bytes32[] keyTuple, uint48 start, uint40 deleteCount, bytes32 encodedLengths, bytes data)", "event Store_DeleteRecord(bytes32 indexed tableId, bytes32[] keyTuple)"];

declare const storeEventsAbi: readonly [{
    readonly name: "Store_SetRecord";
    readonly type: "event";
    readonly inputs: readonly [{
        readonly type: "bytes32";
        readonly name: "tableId";
        readonly indexed: true;
    }, {
        readonly type: "bytes32[]";
        readonly name: "keyTuple";
    }, {
        readonly type: "bytes";
        readonly name: "staticData";
    }, {
        readonly type: "bytes32";
        readonly name: "encodedLengths";
    }, {
        readonly type: "bytes";
        readonly name: "dynamicData";
    }];
}, {
    readonly name: "Store_SpliceStaticData";
    readonly type: "event";
    readonly inputs: readonly [{
        readonly type: "bytes32";
        readonly name: "tableId";
        readonly indexed: true;
    }, {
        readonly type: "bytes32[]";
        readonly name: "keyTuple";
    }, {
        readonly type: "uint48";
        readonly name: "start";
    }, {
        readonly type: "bytes";
        readonly name: "data";
    }];
}, {
    readonly name: "Store_SpliceDynamicData";
    readonly type: "event";
    readonly inputs: readonly [{
        readonly type: "bytes32";
        readonly name: "tableId";
        readonly indexed: true;
    }, {
        readonly type: "bytes32[]";
        readonly name: "keyTuple";
    }, {
        readonly type: "uint48";
        readonly name: "start";
    }, {
        readonly type: "uint40";
        readonly name: "deleteCount";
    }, {
        readonly type: "bytes32";
        readonly name: "encodedLengths";
    }, {
        readonly type: "bytes";
        readonly name: "data";
    }];
}, {
    readonly name: "Store_DeleteRecord";
    readonly type: "event";
    readonly inputs: readonly [{
        readonly type: "bytes32";
        readonly name: "tableId";
        readonly indexed: true;
    }, {
        readonly type: "bytes32[]";
        readonly name: "keyTuple";
    }];
}];
type StoreEventsAbi = typeof storeEventsAbi;
type StoreEventsAbiItem = (typeof storeEventsAbi)[number];

export { ConfigFieldTypeToPrimitiveType, ConfigFieldTypeToSchemaAbiType, ConfigToKeyPrimitives, ConfigToRecordPrimitives, ConfigToTablesPrimitives, ConfigToValuePrimitives, FieldData, FullSchemaConfig, KeySchema, SchemaConfigToPrimitives, SchemaToPrimitives, StoreConfig, StoreEventsAbi, StoreEventsAbiItem, Table, Tables, ValueSchema, helloStoreEvent, storeDeleteRecordEvent, storeEvents, storeEventsAbi, storeSetRecordEvent, storeSpliceDynamicDataEvent, storeSpliceStaticDataEvent };
