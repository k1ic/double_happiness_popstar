import { AbiType, StaticArray, StaticAbiType } from '@latticexyz/schema-type/deprecated';
import { z } from 'zod';
import { StringForUnion, OrDefaults, RequireKeys, ExtractUserTypes, AsDependent } from '@latticexyz/common/type-utils';
import { MUDCoreUserConfig } from '@latticexyz/config';
import { UserType } from '@latticexyz/common/codegen';

declare const PATH_DEFAULTS: {
    readonly storeImportPath: "@latticexyz/store/src/";
    readonly userTypesFilename: "common.sol";
    readonly codegenDirectory: "codegen";
    readonly codegenIndexFilename: "index.sol";
};
declare const DEFAULTS: {
    readonly namespace: "";
    readonly enums: Record<string, never>;
    readonly userTypes: Record<string, never>;
};
declare const TABLE_DEFAULTS: {
    readonly directory: "tables";
    readonly keySchema: {
        readonly key: "bytes32";
    };
    readonly tableIdArgument: false;
    readonly storeArgument: false;
    readonly offchainOnly: false;
};

type FieldData<UserTypes extends StringForUnion> = AbiType | StaticArray | UserTypes;
type KeySchema<StaticUserTypes extends StringForUnion> = StaticAbiType | StaticUserTypes;
/************************************************************************
 *
 *    TABLE SCHEMA
 *
 ************************************************************************/
type FullSchemaConfig<UserTypes extends StringForUnion = StringForUnion> = Record<string, FieldData<UserTypes>>;
type ShorthandSchemaConfig<UserTypes extends StringForUnion = StringForUnion> = FieldData<UserTypes>;
type SchemaConfig<UserTypes extends StringForUnion = StringForUnion> = FullSchemaConfig<UserTypes> | ShorthandSchemaConfig<UserTypes>;
type ExpandSchemaConfig<TSchemaConfig extends SchemaConfig<string>> = TSchemaConfig extends ShorthandSchemaConfig<string> ? {
    value: TSchemaConfig;
} : TSchemaConfig;
declare const zSchemaConfig: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
type ResolvedSchema<TSchema extends Record<string, string>, TUserTypes extends Record<string, Pick<UserType, "internalType">>> = {
    [key in keyof TSchema]: TSchema[key] extends keyof TUserTypes ? TUserTypes[TSchema[key]]["internalType"] : TSchema[key];
};
declare function resolveUserTypes<TSchema extends Record<string, string>, TUserTypes extends Record<string, Pick<UserType, "internalType">>>(schema: TSchema, userTypes: TUserTypes): ResolvedSchema<TSchema, TUserTypes>;
/************************************************************************
 *
 *    TABLE
 *
 ************************************************************************/
interface TableConfig<UserTypes extends StringForUnion = StringForUnion, StaticUserTypes extends StringForUnion = StringForUnion> {
    /** Output directory path for the file. Default is "tables" */
    directory?: string;
    /** Make methods accept `tableId` argument instead of it being a hardcoded constant. Default is false */
    tableIdArgument?: boolean;
    /** Include methods that accept a manual `IStore` argument. Default is true. */
    storeArgument?: boolean;
    /** Include a data struct and methods for it. Default is false for 1-column tables; true for multi-column tables. */
    dataStruct?: boolean;
    /** Offchain tables don't write to onchain storage, but only emit events for offchain clients. Default is false. */
    offchainOnly?: boolean;
    /**
     * Table's key names mapped to their types.
     * Default is `{ key: "bytes32" }`
     * Key names' first letter should be lowercase.
     */
    keySchema?: Record<string, KeySchema<StaticUserTypes>>;
    /**
     * Table's field names mapped to their types.
     * Field names' first letter should be lowercase.
     */
    valueSchema: SchemaConfig<UserTypes>;
}
type FullTableConfig<UserTypes extends StringForUnion = StringForUnion, StaticUserTypes extends StringForUnion = StringForUnion> = Required<TableConfig<UserTypes, StaticUserTypes>> & {
    valueSchema: FullSchemaConfig<UserTypes>;
};
interface ExpandTableConfig<T extends TableConfig<string, string>, TableName extends string> extends OrDefaults<T, {
    directory: typeof TABLE_DEFAULTS.directory;
    name: TableName;
    tableIdArgument: typeof TABLE_DEFAULTS.tableIdArgument;
    storeArgument: typeof TABLE_DEFAULTS.storeArgument;
    dataStruct: boolean;
    keySchema: typeof TABLE_DEFAULTS.keySchema;
    offchainOnly: typeof TABLE_DEFAULTS.offchainOnly;
}> {
    valueSchema: ExpandSchemaConfig<T["valueSchema"]>;
}
declare const zTableConfig: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
    directory: z.ZodDefault<z.ZodString>;
    name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    tableIdArgument: z.ZodDefault<z.ZodBoolean>;
    storeArgument: z.ZodDefault<z.ZodBoolean>;
    dataStruct: z.ZodOptional<z.ZodBoolean>;
    keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
    valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
    offchainOnly: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    directory: string;
    tableIdArgument: boolean;
    storeArgument: boolean;
    keySchema: Record<string, string>;
    valueSchema: Record<string, string>;
    offchainOnly: boolean;
    name?: string | undefined;
    dataStruct?: boolean | undefined;
}, {
    valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
    directory?: string | undefined;
    name?: string | undefined;
    tableIdArgument?: boolean | undefined;
    storeArgument?: boolean | undefined;
    dataStruct?: boolean | undefined;
    keySchema?: Record<string, string> | undefined;
    offchainOnly?: boolean | undefined;
}>, RequireKeys<{
    directory: string;
    tableIdArgument: boolean;
    storeArgument: boolean;
    keySchema: Record<string, string>;
    valueSchema: Record<string, string>;
    offchainOnly: boolean;
    name?: string | undefined;
    dataStruct?: boolean | undefined;
}, "dataStruct">, {
    valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
    directory?: string | undefined;
    name?: string | undefined;
    tableIdArgument?: boolean | undefined;
    storeArgument?: boolean | undefined;
    dataStruct?: boolean | undefined;
    keySchema?: Record<string, string> | undefined;
    offchainOnly?: boolean | undefined;
}>, z.ZodEffects<z.ZodString, RequireKeys<{
    directory: string;
    tableIdArgument: boolean;
    storeArgument: boolean;
    keySchema: Record<string, string>;
    valueSchema: Record<string, string>;
    offchainOnly: boolean;
    name?: string | undefined;
    dataStruct?: boolean | undefined;
}, "dataStruct">, string>]>;
/************************************************************************
 *
 *    TABLES
 *
 ************************************************************************/
type TablesConfig<UserTypes extends StringForUnion = StringForUnion, StaticUserTypes extends StringForUnion = StringForUnion> = Record<string, TableConfig<UserTypes, StaticUserTypes> | FieldData<UserTypes>>;
declare const zTablesConfig: z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodUnion<[z.ZodEffects<z.ZodObject<{
    directory: z.ZodDefault<z.ZodString>;
    name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    tableIdArgument: z.ZodDefault<z.ZodBoolean>;
    storeArgument: z.ZodDefault<z.ZodBoolean>;
    dataStruct: z.ZodOptional<z.ZodBoolean>;
    keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
    valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
    offchainOnly: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    directory: string;
    tableIdArgument: boolean;
    storeArgument: boolean;
    keySchema: Record<string, string>;
    valueSchema: Record<string, string>;
    offchainOnly: boolean;
    name?: string | undefined;
    dataStruct?: boolean | undefined;
}, {
    valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
    directory?: string | undefined;
    name?: string | undefined;
    tableIdArgument?: boolean | undefined;
    storeArgument?: boolean | undefined;
    dataStruct?: boolean | undefined;
    keySchema?: Record<string, string> | undefined;
    offchainOnly?: boolean | undefined;
}>, RequireKeys<{
    directory: string;
    tableIdArgument: boolean;
    storeArgument: boolean;
    keySchema: Record<string, string>;
    valueSchema: Record<string, string>;
    offchainOnly: boolean;
    name?: string | undefined;
    dataStruct?: boolean | undefined;
}, "dataStruct">, {
    valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
    directory?: string | undefined;
    name?: string | undefined;
    tableIdArgument?: boolean | undefined;
    storeArgument?: boolean | undefined;
    dataStruct?: boolean | undefined;
    keySchema?: Record<string, string> | undefined;
    offchainOnly?: boolean | undefined;
}>, z.ZodEffects<z.ZodString, RequireKeys<{
    directory: string;
    tableIdArgument: boolean;
    storeArgument: boolean;
    keySchema: Record<string, string>;
    valueSchema: Record<string, string>;
    offchainOnly: boolean;
    name?: string | undefined;
    dataStruct?: boolean | undefined;
}, "dataStruct">, string>]>>, Record<string, RequireKeys<RequireKeys<{
    directory: string;
    tableIdArgument: boolean;
    storeArgument: boolean;
    keySchema: Record<string, string>;
    valueSchema: Record<string, string>;
    offchainOnly: boolean;
    name?: string | undefined;
    dataStruct?: boolean | undefined;
}, "dataStruct">, "name">>, Record<string, string | {
    valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
    directory?: string | undefined;
    name?: string | undefined;
    tableIdArgument?: boolean | undefined;
    storeArgument?: boolean | undefined;
    dataStruct?: boolean | undefined;
    keySchema?: Record<string, string> | undefined;
    offchainOnly?: boolean | undefined;
}>>;
type FullTablesConfig<UserTypes extends StringForUnion = StringForUnion, StaticUserTypes extends StringForUnion = StringForUnion> = Record<string, FullTableConfig<UserTypes, StaticUserTypes>>;
type ExpandTablesConfig<T extends TablesConfig<string, string>> = {
    [TableName in keyof T]: T[TableName] extends FieldData<string> ? ExpandTableConfig<{
        valueSchema: {
            value: T[TableName];
        };
    }, TableName extends string ? TableName : never> : T[TableName] extends TableConfig<string, string> ? ExpandTableConfig<T[TableName], TableName extends string ? TableName : never> : ExpandTableConfig<TableConfig<string, string>, TableName extends string ? TableName : string>;
};
/************************************************************************
 *
 *    ENUMS
 *
 ************************************************************************/
type EnumsConfig<EnumNames extends StringForUnion> = never extends EnumNames ? {
    /**
     * Enum names mapped to lists of their member names
     *
     * (enums are inferred to be absent)
     */
    enums?: Record<EnumNames, string[]>;
} : StringForUnion extends EnumNames ? {
    /**
     * Enum names mapped to lists of their member names
     *
     * (enums aren't inferred - use `mudConfig` or `storeConfig` helper, and `as const` for variables)
     */
    enums?: Record<EnumNames, string[]>;
} : {
    /**
     * Enum names mapped to lists of their member names
     *
     * Enums defined here can be used as types in table schemas/keys
     */
    enums: Record<EnumNames, string[]>;
};
type FullEnumsConfig<EnumNames extends StringForUnion> = {
    enums: Record<EnumNames, string[]>;
};
declare const zEnumsConfig: z.ZodObject<{
    enums: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>>>;
}, "strip", z.ZodTypeAny, {
    enums: Record<string, string[]>;
}, {
    enums?: Record<string, string[]> | undefined;
}>;
/************************************************************************
 *
 *    USER TYPES
 *
 ************************************************************************/
type UserTypesConfig<UserTypeNames extends StringForUnion = StringForUnion> = never extends UserTypeNames ? {
    /**
     * User types mapped to file paths from which to import them.
     * Paths are treated as relative to root.
     * Paths that don't start with a "." have foundry remappings applied to them first.
     *
     * (user types are inferred to be absent)
     */
    userTypes?: Record<UserTypeNames, UserType>;
} : StringForUnion extends UserTypeNames ? {
    /**
     * User types mapped to file paths from which to import them.
     * Paths are treated as relative to root.
     * Paths that don't start with a "." have foundry remappings applied to them first.
     *
     * (user types aren't inferred - use `mudConfig` or `storeConfig` helper, and `as const` for variables)
     */
    userTypes?: Record<UserTypeNames, UserType>;
} : {
    /**
     * User types mapped to file paths from which to import them.
     * Paths are treated as relative to root.
     * Paths that don't start with a "." have foundry remappings applied to them first.
     *
     * User types defined here can be used as types in table schemas/keys
     */
    userTypes: Record<UserTypeNames, UserType>;
};
declare const zUserTypesConfig: z.ZodObject<{
    userTypes: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        filePath: z.ZodString;
        internalType: z.ZodEnum<["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"]>;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>>>;
}, "strip", z.ZodTypeAny, {
    userTypes: Record<string, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>;
}, {
    userTypes?: Record<string, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }> | undefined;
}>;
/************************************************************************
 *
 *    FINAL
 *
 ************************************************************************/
/** MUDCoreUserConfig wrapper to use generics in some options for better type inference */
type MUDUserConfig<T extends MUDCoreUserConfig = MUDCoreUserConfig, EnumNames extends StringForUnion = StringForUnion, UserTypeNames extends StringForUnion = StringForUnion, StaticUserTypes extends ExtractUserTypes<EnumNames | UserTypeNames> = ExtractUserTypes<EnumNames | UserTypeNames>> = T & EnumsConfig<EnumNames> & UserTypesConfig<UserTypeNames> & {
    /**
     * Configuration for each table.
     *
     * The key is the table name (capitalized).
     *
     * The value:
     *  - abi or user type for a single-value table.
     *  - FullTableConfig object for multi-value tables (or for customizable options).
     */
    tables: TablesConfig<AsDependent<StaticUserTypes>, AsDependent<StaticUserTypes>>;
    /** The namespace for table ids. Default is "" (ROOT) */
    namespace?: string;
    /** Path for store package imports. Default is "@latticexyz/store/src/" */
    storeImportPath?: string;
    /** Filename where common user types will be generated and imported from. Default is "common.sol" */
    userTypesFilename?: string;
    /** Path to the directory where generated files will be placed. (Default is "codegen") */
    codegenDirectory?: string;
    /** Filename where codegen index will be generated. Default is "index.sol" */
    codegenIndexFilename?: string;
};
declare const zStoreConfig: z.ZodEffects<z.ZodObject<{
    namespace: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    storeImportPath: z.ZodDefault<z.ZodString>;
    tables: z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        directory: z.ZodDefault<z.ZodString>;
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        tableIdArgument: z.ZodDefault<z.ZodBoolean>;
        storeArgument: z.ZodDefault<z.ZodBoolean>;
        dataStruct: z.ZodOptional<z.ZodBoolean>;
        keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
        valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
        offchainOnly: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, z.ZodEffects<z.ZodString, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, string>]>>, Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>, Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>>;
    userTypesFilename: z.ZodDefault<z.ZodString>;
    codegenDirectory: z.ZodDefault<z.ZodString>;
    codegenIndexFilename: z.ZodDefault<z.ZodString>;
    enums: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>>>;
    userTypes: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        filePath: z.ZodString;
        internalType: z.ZodEnum<["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"]>;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>>>;
}, "strip", z.ZodTypeAny, {
    namespace: string;
    storeImportPath: string;
    tables: Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>;
    userTypesFilename: string;
    codegenDirectory: string;
    codegenIndexFilename: string;
    enums: Record<string, string[]>;
    userTypes: Record<string, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>;
}, {
    tables: Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>;
    namespace?: string | undefined;
    storeImportPath?: string | undefined;
    userTypesFilename?: string | undefined;
    codegenDirectory?: string | undefined;
    codegenIndexFilename?: string | undefined;
    enums?: Record<string, string[]> | undefined;
    userTypes?: Record<string, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }> | undefined;
}>, {
    namespace: string;
    storeImportPath: string;
    tables: Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>;
    userTypesFilename: string;
    codegenDirectory: string;
    codegenIndexFilename: string;
    enums: Record<string, string[]>;
    userTypes: Record<string, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>;
}, {
    tables: Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>;
    namespace?: string | undefined;
    storeImportPath?: string | undefined;
    userTypesFilename?: string | undefined;
    codegenDirectory?: string | undefined;
    codegenIndexFilename?: string | undefined;
    enums?: Record<string, string[]> | undefined;
    userTypes?: Record<string, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }> | undefined;
}>;
type StoreUserConfig = z.input<typeof zStoreConfig>;
type StoreConfig = z.output<typeof zStoreConfig>;
declare const zPluginStoreConfig: z.ZodEffects<z.ZodObject<{
    namespace: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    storeImportPath: z.ZodDefault<z.ZodString>;
    tables: z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        directory: z.ZodDefault<z.ZodString>;
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        tableIdArgument: z.ZodDefault<z.ZodBoolean>;
        storeArgument: z.ZodDefault<z.ZodBoolean>;
        dataStruct: z.ZodOptional<z.ZodBoolean>;
        keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
        valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
        offchainOnly: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, z.ZodEffects<z.ZodString, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, string>]>>, Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>, Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>>;
    userTypesFilename: z.ZodDefault<z.ZodString>;
    codegenDirectory: z.ZodDefault<z.ZodString>;
    codegenIndexFilename: z.ZodDefault<z.ZodString>;
    enums: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>>>;
    userTypes: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        filePath: z.ZodString;
        internalType: z.ZodEnum<["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"]>;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>>>;
}, "strip", z.ZodAny, z.objectOutputType<{
    namespace: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    storeImportPath: z.ZodDefault<z.ZodString>;
    tables: z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        directory: z.ZodDefault<z.ZodString>;
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        tableIdArgument: z.ZodDefault<z.ZodBoolean>;
        storeArgument: z.ZodDefault<z.ZodBoolean>;
        dataStruct: z.ZodOptional<z.ZodBoolean>;
        keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
        valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
        offchainOnly: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, z.ZodEffects<z.ZodString, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, string>]>>, Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>, Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>>;
    userTypesFilename: z.ZodDefault<z.ZodString>;
    codegenDirectory: z.ZodDefault<z.ZodString>;
    codegenIndexFilename: z.ZodDefault<z.ZodString>;
    enums: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>>>;
    userTypes: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        filePath: z.ZodString;
        internalType: z.ZodEnum<["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"]>;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>>>;
}, z.ZodAny, "strip">, z.objectInputType<{
    namespace: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    storeImportPath: z.ZodDefault<z.ZodString>;
    tables: z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        directory: z.ZodDefault<z.ZodString>;
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        tableIdArgument: z.ZodDefault<z.ZodBoolean>;
        storeArgument: z.ZodDefault<z.ZodBoolean>;
        dataStruct: z.ZodOptional<z.ZodBoolean>;
        keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
        valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
        offchainOnly: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, z.ZodEffects<z.ZodString, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, string>]>>, Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>, Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>>;
    userTypesFilename: z.ZodDefault<z.ZodString>;
    codegenDirectory: z.ZodDefault<z.ZodString>;
    codegenIndexFilename: z.ZodDefault<z.ZodString>;
    enums: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>>>;
    userTypes: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        filePath: z.ZodString;
        internalType: z.ZodEnum<["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"]>;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>>>;
}, z.ZodAny, "strip">>, z.objectOutputType<{
    namespace: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    storeImportPath: z.ZodDefault<z.ZodString>;
    tables: z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        directory: z.ZodDefault<z.ZodString>;
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        tableIdArgument: z.ZodDefault<z.ZodBoolean>;
        storeArgument: z.ZodDefault<z.ZodBoolean>;
        dataStruct: z.ZodOptional<z.ZodBoolean>;
        keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
        valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
        offchainOnly: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, z.ZodEffects<z.ZodString, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, string>]>>, Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>, Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>>;
    userTypesFilename: z.ZodDefault<z.ZodString>;
    codegenDirectory: z.ZodDefault<z.ZodString>;
    codegenIndexFilename: z.ZodDefault<z.ZodString>;
    enums: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>>>;
    userTypes: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        filePath: z.ZodString;
        internalType: z.ZodEnum<["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"]>;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>>>;
}, z.ZodAny, "strip">, z.objectInputType<{
    namespace: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    storeImportPath: z.ZodDefault<z.ZodString>;
    tables: z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        directory: z.ZodDefault<z.ZodString>;
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        tableIdArgument: z.ZodDefault<z.ZodBoolean>;
        storeArgument: z.ZodDefault<z.ZodBoolean>;
        dataStruct: z.ZodOptional<z.ZodBoolean>;
        keySchema: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>>;
        valueSchema: z.ZodUnion<[z.ZodEffects<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, Record<string, string>, Record<string, string>>, z.ZodEffects<z.ZodString, Record<string, string>, string>]>;
        offchainOnly: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>, z.ZodEffects<z.ZodString, RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, string>]>>, Record<string, RequireKeys<RequireKeys<{
        directory: string;
        tableIdArgument: boolean;
        storeArgument: boolean;
        keySchema: Record<string, string>;
        valueSchema: Record<string, string>;
        offchainOnly: boolean;
        name?: string | undefined;
        dataStruct?: boolean | undefined;
    }, "dataStruct">, "name">>, Record<string, string | {
        valueSchema: (string | Record<string, string>) & (string | Record<string, string> | undefined);
        directory?: string | undefined;
        name?: string | undefined;
        tableIdArgument?: boolean | undefined;
        storeArgument?: boolean | undefined;
        dataStruct?: boolean | undefined;
        keySchema?: Record<string, string> | undefined;
        offchainOnly?: boolean | undefined;
    }>>;
    userTypesFilename: z.ZodDefault<z.ZodString>;
    codegenDirectory: z.ZodDefault<z.ZodString>;
    codegenIndexFilename: z.ZodDefault<z.ZodString>;
    enums: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">, string[], string[]>>>;
    userTypes: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        filePath: z.ZodString;
        internalType: z.ZodEnum<["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"]>;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }, {
        filePath: string;
        internalType: "string" | "bytes32" | "address" | "bool" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]";
    }>>>;
}, z.ZodAny, "strip">>;

export { DEFAULTS as D, ExpandSchemaConfig as E, FieldData as F, MUDUserConfig as M, PATH_DEFAULTS as P, StoreConfig as S, TABLE_DEFAULTS as T, UserTypesConfig as U, FullSchemaConfig as a, ShorthandSchemaConfig as b, SchemaConfig as c, TableConfig as d, FullTableConfig as e, ExpandTableConfig as f, zTableConfig as g, TablesConfig as h, zTablesConfig as i, FullTablesConfig as j, ExpandTablesConfig as k, EnumsConfig as l, FullEnumsConfig as m, zEnumsConfig as n, zUserTypesConfig as o, zStoreConfig as p, StoreUserConfig as q, resolveUserTypes as r, zPluginStoreConfig as s, zSchemaConfig as z };
