import { z } from 'zod';
import { DynamicResolutionType, ValueWithType, DynamicResolution } from '@latticexyz/config';
import { OrDefaults } from '@latticexyz/common/type-utils';

declare const SYSTEM_DEFAULTS: {
    readonly registerFunctionSelector: true;
    readonly openAccess: true;
    readonly accessList: string[];
};
declare const WORLD_DEFAULTS: {
    readonly worldContractName: undefined;
    readonly worldInterfaceName: "IWorld";
    readonly systems: Record<string, never>;
    readonly excludeSystems: string[];
    readonly postDeployScript: "PostDeploy";
    readonly deploysDirectory: "./deploys";
    readonly worldsFile: "./worlds.json";
    readonly worldgenDirectory: "world";
    readonly worldImportPath: "@latticexyz/world/src/";
    readonly modules: [];
};

declare const zWorldConfig: z.ZodObject<{
    worldContractName: z.ZodOptional<z.ZodString>;
    worldInterfaceName: z.ZodDefault<z.ZodString>;
    systems: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodIntersection<z.ZodObject<{
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        registerFunctionSelectors: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        registerFunctionSelectors: boolean;
        name?: string | undefined;
    }, {
        name?: string | undefined;
        registerFunctionSelectors?: boolean | undefined;
    }>, z.ZodDiscriminatedUnion<"openAccess", [z.ZodObject<{
        openAccess: z.ZodDefault<z.ZodLiteral<true>>;
    }, "strip", z.ZodTypeAny, {
        openAccess: true;
    }, {
        openAccess?: true | undefined;
    }>, z.ZodObject<{
        openAccess: z.ZodLiteral<false>;
        accessList: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        openAccess: false;
        accessList: string[];
    }, {
        openAccess: false;
        accessList?: string[] | undefined;
    }>]>>>>;
    excludeSystems: z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    postDeployScript: z.ZodDefault<z.ZodString>;
    deploysDirectory: z.ZodDefault<z.ZodString>;
    worldsFile: z.ZodDefault<z.ZodString>;
    worldgenDirectory: z.ZodDefault<z.ZodString>;
    worldImportPath: z.ZodDefault<z.ZodString>;
    modules: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodEffects<z.ZodString, string, string>;
        root: z.ZodDefault<z.ZodBoolean>;
        args: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>]>;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }>, z.ZodObject<{
            type: z.ZodNativeEnum<typeof DynamicResolutionType>;
            input: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: DynamicResolutionType;
            input: string;
        }, {
            type: DynamicResolutionType;
            input: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        root: boolean;
        args: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[];
    }, {
        name: string;
        root?: boolean | undefined;
        args?: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    worldInterfaceName: string;
    systems: Record<string, {
        registerFunctionSelectors: boolean;
        name?: string | undefined;
    } & ({
        openAccess: true;
    } | {
        openAccess: false;
        accessList: string[];
    })>;
    excludeSystems: string[];
    postDeployScript: string;
    deploysDirectory: string;
    worldsFile: string;
    worldgenDirectory: string;
    worldImportPath: string;
    modules: {
        name: string;
        root: boolean;
        args: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[];
    }[];
    worldContractName?: string | undefined;
}, {
    worldContractName?: string | undefined;
    worldInterfaceName?: string | undefined;
    systems?: Record<string, {
        name?: string | undefined;
        registerFunctionSelectors?: boolean | undefined;
    } & ({
        openAccess?: true | undefined;
    } | {
        openAccess: false;
        accessList?: string[] | undefined;
    })> | undefined;
    excludeSystems?: string[] | undefined;
    postDeployScript?: string | undefined;
    deploysDirectory?: string | undefined;
    worldsFile?: string | undefined;
    worldgenDirectory?: string | undefined;
    worldImportPath?: string | undefined;
    modules?: {
        name: string;
        root?: boolean | undefined;
        args?: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[] | undefined;
    }[] | undefined;
}>;
declare const zPluginWorldConfig: z.ZodObject<{
    worldContractName: z.ZodOptional<z.ZodString>;
    worldInterfaceName: z.ZodDefault<z.ZodString>;
    systems: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodIntersection<z.ZodObject<{
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        registerFunctionSelectors: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        registerFunctionSelectors: boolean;
        name?: string | undefined;
    }, {
        name?: string | undefined;
        registerFunctionSelectors?: boolean | undefined;
    }>, z.ZodDiscriminatedUnion<"openAccess", [z.ZodObject<{
        openAccess: z.ZodDefault<z.ZodLiteral<true>>;
    }, "strip", z.ZodTypeAny, {
        openAccess: true;
    }, {
        openAccess?: true | undefined;
    }>, z.ZodObject<{
        openAccess: z.ZodLiteral<false>;
        accessList: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        openAccess: false;
        accessList: string[];
    }, {
        openAccess: false;
        accessList?: string[] | undefined;
    }>]>>>>;
    excludeSystems: z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    postDeployScript: z.ZodDefault<z.ZodString>;
    deploysDirectory: z.ZodDefault<z.ZodString>;
    worldsFile: z.ZodDefault<z.ZodString>;
    worldgenDirectory: z.ZodDefault<z.ZodString>;
    worldImportPath: z.ZodDefault<z.ZodString>;
    modules: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodEffects<z.ZodString, string, string>;
        root: z.ZodDefault<z.ZodBoolean>;
        args: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>]>;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }>, z.ZodObject<{
            type: z.ZodNativeEnum<typeof DynamicResolutionType>;
            input: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: DynamicResolutionType;
            input: string;
        }, {
            type: DynamicResolutionType;
            input: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        root: boolean;
        args: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[];
    }, {
        name: string;
        root?: boolean | undefined;
        args?: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[] | undefined;
    }>, "many">>;
}, "strip", z.ZodAny, z.objectOutputType<{
    worldContractName: z.ZodOptional<z.ZodString>;
    worldInterfaceName: z.ZodDefault<z.ZodString>;
    systems: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodIntersection<z.ZodObject<{
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        registerFunctionSelectors: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        registerFunctionSelectors: boolean;
        name?: string | undefined;
    }, {
        name?: string | undefined;
        registerFunctionSelectors?: boolean | undefined;
    }>, z.ZodDiscriminatedUnion<"openAccess", [z.ZodObject<{
        openAccess: z.ZodDefault<z.ZodLiteral<true>>;
    }, "strip", z.ZodTypeAny, {
        openAccess: true;
    }, {
        openAccess?: true | undefined;
    }>, z.ZodObject<{
        openAccess: z.ZodLiteral<false>;
        accessList: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        openAccess: false;
        accessList: string[];
    }, {
        openAccess: false;
        accessList?: string[] | undefined;
    }>]>>>>;
    excludeSystems: z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    postDeployScript: z.ZodDefault<z.ZodString>;
    deploysDirectory: z.ZodDefault<z.ZodString>;
    worldsFile: z.ZodDefault<z.ZodString>;
    worldgenDirectory: z.ZodDefault<z.ZodString>;
    worldImportPath: z.ZodDefault<z.ZodString>;
    modules: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodEffects<z.ZodString, string, string>;
        root: z.ZodDefault<z.ZodBoolean>;
        args: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>]>;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }>, z.ZodObject<{
            type: z.ZodNativeEnum<typeof DynamicResolutionType>;
            input: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: DynamicResolutionType;
            input: string;
        }, {
            type: DynamicResolutionType;
            input: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        root: boolean;
        args: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[];
    }, {
        name: string;
        root?: boolean | undefined;
        args?: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[] | undefined;
    }>, "many">>;
}, z.ZodAny, "strip">, z.objectInputType<{
    worldContractName: z.ZodOptional<z.ZodString>;
    worldInterfaceName: z.ZodDefault<z.ZodString>;
    systems: z.ZodDefault<z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodIntersection<z.ZodObject<{
        name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        registerFunctionSelectors: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        registerFunctionSelectors: boolean;
        name?: string | undefined;
    }, {
        name?: string | undefined;
        registerFunctionSelectors?: boolean | undefined;
    }>, z.ZodDiscriminatedUnion<"openAccess", [z.ZodObject<{
        openAccess: z.ZodDefault<z.ZodLiteral<true>>;
    }, "strip", z.ZodTypeAny, {
        openAccess: true;
    }, {
        openAccess?: true | undefined;
    }>, z.ZodObject<{
        openAccess: z.ZodLiteral<false>;
        accessList: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        openAccess: false;
        accessList: string[];
    }, {
        openAccess: false;
        accessList?: string[] | undefined;
    }>]>>>>;
    excludeSystems: z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    postDeployScript: z.ZodDefault<z.ZodString>;
    deploysDirectory: z.ZodDefault<z.ZodString>;
    worldsFile: z.ZodDefault<z.ZodString>;
    worldgenDirectory: z.ZodDefault<z.ZodString>;
    worldImportPath: z.ZodDefault<z.ZodString>;
    modules: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodEffects<z.ZodString, string, string>;
        root: z.ZodDefault<z.ZodBoolean>;
        args: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>]>;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }, {
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        }>, z.ZodObject<{
            type: z.ZodNativeEnum<typeof DynamicResolutionType>;
            input: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: DynamicResolutionType;
            input: string;
        }, {
            type: DynamicResolutionType;
            input: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        root: boolean;
        args: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[];
    }, {
        name: string;
        root?: boolean | undefined;
        args?: ({
            type: string;
            value: (string | number | Uint8Array) & (string | number | Uint8Array | undefined);
        } | {
            type: DynamicResolutionType;
            input: string;
        })[] | undefined;
    }>, "many">>;
}, z.ZodAny, "strip">>;

type SystemUserConfig = {
    /** The full resource selector consists of namespace and name */
    name?: string;
    /**
     * Register function selectors for the system in the World.
     * Defaults to true.
     * Note:
     * - For root systems all World function selectors will correspond to the system's function selectors.
     * - For non-root systems, the World function selectors will be <namespace>_<system>_<function>.
     */
    registerFunctionSelectors?: boolean;
} & ({
    /** If openAccess is true, any address can call the system */
    openAccess?: true;
} | {
    /** If openAccess is false, only the addresses or systems in `access` can call the system */
    openAccess: false;
    /** An array of addresses or system names that can access the system */
    accessList: string[];
});
interface ExpandSystemConfig<T extends SystemUserConfig, SystemName extends string> extends OrDefaults<T, {
    name: SystemName;
    registerFunctionSelectors: typeof SYSTEM_DEFAULTS.registerFunctionSelector;
    openAccess: typeof SYSTEM_DEFAULTS.openAccess;
}> {
    accessList: T extends {
        accessList: string[];
    } ? T["accessList"] : typeof SYSTEM_DEFAULTS.accessList;
}
type SystemsUserConfig = Record<string, SystemUserConfig>;
type ExpandSystemsConfig<T extends SystemsUserConfig> = {
    [SystemName in keyof T]: ExpandSystemConfig<T[SystemName], SystemName extends string ? SystemName : never>;
};
type ModuleConfig = {
    /** The name of the module */
    name: string;
    /** Should this module be installed as a root module? */
    root?: boolean;
    /** Arguments to be passed to the module's install method */
    args?: (ValueWithType | DynamicResolution)[];
};
interface WorldUserConfig {
    /** The name of the World contract to deploy. If no name is provided, a vanilla World is deployed */
    worldContractName?: string;
    /** The name of the World interface to generate. (Default `IWorld`) */
    worldInterfaceName?: string;
    /**
     * Contracts named *System will be deployed by default
     * as public systems at `namespace/ContractName`, unless overridden
     *
     * The key is the system name (capitalized).
     * The value is a SystemConfig object.
     */
    systems?: SystemsUserConfig;
    /** Systems to exclude from automatic deployment */
    excludeSystems?: string[];
    /**
     * Script to execute after the deployment is complete (Default "PostDeploy").
     * Script must be placed in the forge scripts directory (see foundry.toml) and have a ".s.sol" extension.
     */
    postDeployScript?: string;
    /** Directory to write the deployment info to (Default "./deploys") */
    deploysDirectory?: string;
    /** JSON file to write to with chain -> latest world deploy address (Default "./worlds.json") */
    worldsFile?: string;
    /** Directory to output system and world interfaces of `worldgen` (Default "world") */
    worldgenDirectory?: string;
    /** Path for world package imports. Default is "@latticexyz/world/src/" */
    worldImportPath?: string;
    /** Modules to in the World */
    modules?: ModuleConfig[];
}
type WorldConfig = z.output<typeof zWorldConfig>;
type SystemConfig = WorldConfig["systems"][string];

export { ExpandSystemConfig as E, ModuleConfig as M, SystemConfig as S, WorldConfig as W, SYSTEM_DEFAULTS as a, WORLD_DEFAULTS as b, SystemUserConfig as c, SystemsUserConfig as d, ExpandSystemsConfig as e, WorldUserConfig as f, zPluginWorldConfig as g, zWorldConfig as z };
