import { AbiType as AbiType$1, AbiTypeToPrimitiveType as AbiTypeToPrimitiveType$1 } from 'abitype';

declare enum SchemaType {
    UINT8 = 0,
    UINT16 = 1,
    UINT24 = 2,
    UINT32 = 3,
    UINT40 = 4,
    UINT48 = 5,
    UINT56 = 6,
    UINT64 = 7,
    UINT72 = 8,
    UINT80 = 9,
    UINT88 = 10,
    UINT96 = 11,
    UINT104 = 12,
    UINT112 = 13,
    UINT120 = 14,
    UINT128 = 15,
    UINT136 = 16,
    UINT144 = 17,
    UINT152 = 18,
    UINT160 = 19,
    UINT168 = 20,
    UINT176 = 21,
    UINT184 = 22,
    UINT192 = 23,
    UINT200 = 24,
    UINT208 = 25,
    UINT216 = 26,
    UINT224 = 27,
    UINT232 = 28,
    UINT240 = 29,
    UINT248 = 30,
    UINT256 = 31,
    INT8 = 32,
    INT16 = 33,
    INT24 = 34,
    INT32 = 35,
    INT40 = 36,
    INT48 = 37,
    INT56 = 38,
    INT64 = 39,
    INT72 = 40,
    INT80 = 41,
    INT88 = 42,
    INT96 = 43,
    INT104 = 44,
    INT112 = 45,
    INT120 = 46,
    INT128 = 47,
    INT136 = 48,
    INT144 = 49,
    INT152 = 50,
    INT160 = 51,
    INT168 = 52,
    INT176 = 53,
    INT184 = 54,
    INT192 = 55,
    INT200 = 56,
    INT208 = 57,
    INT216 = 58,
    INT224 = 59,
    INT232 = 60,
    INT240 = 61,
    INT248 = 62,
    INT256 = 63,
    BYTES1 = 64,
    BYTES2 = 65,
    BYTES3 = 66,
    BYTES4 = 67,
    BYTES5 = 68,
    BYTES6 = 69,
    BYTES7 = 70,
    BYTES8 = 71,
    BYTES9 = 72,
    BYTES10 = 73,
    BYTES11 = 74,
    BYTES12 = 75,
    BYTES13 = 76,
    BYTES14 = 77,
    BYTES15 = 78,
    BYTES16 = 79,
    BYTES17 = 80,
    BYTES18 = 81,
    BYTES19 = 82,
    BYTES20 = 83,
    BYTES21 = 84,
    BYTES22 = 85,
    BYTES23 = 86,
    BYTES24 = 87,
    BYTES25 = 88,
    BYTES26 = 89,
    BYTES27 = 90,
    BYTES28 = 91,
    BYTES29 = 92,
    BYTES30 = 93,
    BYTES31 = 94,
    BYTES32 = 95,
    BOOL = 96,
    ADDRESS = 97,
    UINT8_ARRAY = 98,
    UINT16_ARRAY = 99,
    UINT24_ARRAY = 100,
    UINT32_ARRAY = 101,
    UINT40_ARRAY = 102,
    UINT48_ARRAY = 103,
    UINT56_ARRAY = 104,
    UINT64_ARRAY = 105,
    UINT72_ARRAY = 106,
    UINT80_ARRAY = 107,
    UINT88_ARRAY = 108,
    UINT96_ARRAY = 109,
    UINT104_ARRAY = 110,
    UINT112_ARRAY = 111,
    UINT120_ARRAY = 112,
    UINT128_ARRAY = 113,
    UINT136_ARRAY = 114,
    UINT144_ARRAY = 115,
    UINT152_ARRAY = 116,
    UINT160_ARRAY = 117,
    UINT168_ARRAY = 118,
    UINT176_ARRAY = 119,
    UINT184_ARRAY = 120,
    UINT192_ARRAY = 121,
    UINT200_ARRAY = 122,
    UINT208_ARRAY = 123,
    UINT216_ARRAY = 124,
    UINT224_ARRAY = 125,
    UINT232_ARRAY = 126,
    UINT240_ARRAY = 127,
    UINT248_ARRAY = 128,
    UINT256_ARRAY = 129,
    INT8_ARRAY = 130,
    INT16_ARRAY = 131,
    INT24_ARRAY = 132,
    INT32_ARRAY = 133,
    INT40_ARRAY = 134,
    INT48_ARRAY = 135,
    INT56_ARRAY = 136,
    INT64_ARRAY = 137,
    INT72_ARRAY = 138,
    INT80_ARRAY = 139,
    INT88_ARRAY = 140,
    INT96_ARRAY = 141,
    INT104_ARRAY = 142,
    INT112_ARRAY = 143,
    INT120_ARRAY = 144,
    INT128_ARRAY = 145,
    INT136_ARRAY = 146,
    INT144_ARRAY = 147,
    INT152_ARRAY = 148,
    INT160_ARRAY = 149,
    INT168_ARRAY = 150,
    INT176_ARRAY = 151,
    INT184_ARRAY = 152,
    INT192_ARRAY = 153,
    INT200_ARRAY = 154,
    INT208_ARRAY = 155,
    INT216_ARRAY = 156,
    INT224_ARRAY = 157,
    INT232_ARRAY = 158,
    INT240_ARRAY = 159,
    INT248_ARRAY = 160,
    INT256_ARRAY = 161,
    BYTES1_ARRAY = 162,
    BYTES2_ARRAY = 163,
    BYTES3_ARRAY = 164,
    BYTES4_ARRAY = 165,
    BYTES5_ARRAY = 166,
    BYTES6_ARRAY = 167,
    BYTES7_ARRAY = 168,
    BYTES8_ARRAY = 169,
    BYTES9_ARRAY = 170,
    BYTES10_ARRAY = 171,
    BYTES11_ARRAY = 172,
    BYTES12_ARRAY = 173,
    BYTES13_ARRAY = 174,
    BYTES14_ARRAY = 175,
    BYTES15_ARRAY = 176,
    BYTES16_ARRAY = 177,
    BYTES17_ARRAY = 178,
    BYTES18_ARRAY = 179,
    BYTES19_ARRAY = 180,
    BYTES20_ARRAY = 181,
    BYTES21_ARRAY = 182,
    BYTES22_ARRAY = 183,
    BYTES23_ARRAY = 184,
    BYTES24_ARRAY = 185,
    BYTES25_ARRAY = 186,
    BYTES26_ARRAY = 187,
    BYTES27_ARRAY = 188,
    BYTES28_ARRAY = 189,
    BYTES29_ARRAY = 190,
    BYTES30_ARRAY = 191,
    BYTES31_ARRAY = 192,
    BYTES32_ARRAY = 193,
    BOOL_ARRAY = 194,
    ADDRESS_ARRAY = 195,
    BYTES = 196,
    STRING = 197
}

declare const SchemaTypeToAbiType: {
    readonly 0: "uint8";
    readonly 1: "uint16";
    readonly 2: "uint24";
    readonly 3: "uint32";
    readonly 4: "uint40";
    readonly 5: "uint48";
    readonly 6: "uint56";
    readonly 7: "uint64";
    readonly 8: "uint72";
    readonly 9: "uint80";
    readonly 10: "uint88";
    readonly 11: "uint96";
    readonly 12: "uint104";
    readonly 13: "uint112";
    readonly 14: "uint120";
    readonly 15: "uint128";
    readonly 16: "uint136";
    readonly 17: "uint144";
    readonly 18: "uint152";
    readonly 19: "uint160";
    readonly 20: "uint168";
    readonly 21: "uint176";
    readonly 22: "uint184";
    readonly 23: "uint192";
    readonly 24: "uint200";
    readonly 25: "uint208";
    readonly 26: "uint216";
    readonly 27: "uint224";
    readonly 28: "uint232";
    readonly 29: "uint240";
    readonly 30: "uint248";
    readonly 31: "uint256";
    readonly 32: "int8";
    readonly 33: "int16";
    readonly 34: "int24";
    readonly 35: "int32";
    readonly 36: "int40";
    readonly 37: "int48";
    readonly 38: "int56";
    readonly 39: "int64";
    readonly 40: "int72";
    readonly 41: "int80";
    readonly 42: "int88";
    readonly 43: "int96";
    readonly 44: "int104";
    readonly 45: "int112";
    readonly 46: "int120";
    readonly 47: "int128";
    readonly 48: "int136";
    readonly 49: "int144";
    readonly 50: "int152";
    readonly 51: "int160";
    readonly 52: "int168";
    readonly 53: "int176";
    readonly 54: "int184";
    readonly 55: "int192";
    readonly 56: "int200";
    readonly 57: "int208";
    readonly 58: "int216";
    readonly 59: "int224";
    readonly 60: "int232";
    readonly 61: "int240";
    readonly 62: "int248";
    readonly 63: "int256";
    readonly 64: "bytes1";
    readonly 65: "bytes2";
    readonly 66: "bytes3";
    readonly 67: "bytes4";
    readonly 68: "bytes5";
    readonly 69: "bytes6";
    readonly 70: "bytes7";
    readonly 71: "bytes8";
    readonly 72: "bytes9";
    readonly 73: "bytes10";
    readonly 74: "bytes11";
    readonly 75: "bytes12";
    readonly 76: "bytes13";
    readonly 77: "bytes14";
    readonly 78: "bytes15";
    readonly 79: "bytes16";
    readonly 80: "bytes17";
    readonly 81: "bytes18";
    readonly 82: "bytes19";
    readonly 83: "bytes20";
    readonly 84: "bytes21";
    readonly 85: "bytes22";
    readonly 86: "bytes23";
    readonly 87: "bytes24";
    readonly 88: "bytes25";
    readonly 89: "bytes26";
    readonly 90: "bytes27";
    readonly 91: "bytes28";
    readonly 92: "bytes29";
    readonly 93: "bytes30";
    readonly 94: "bytes31";
    readonly 95: "bytes32";
    readonly 96: "bool";
    readonly 97: "address";
    readonly 98: "uint8[]";
    readonly 99: "uint16[]";
    readonly 100: "uint24[]";
    readonly 101: "uint32[]";
    readonly 102: "uint40[]";
    readonly 103: "uint48[]";
    readonly 104: "uint56[]";
    readonly 105: "uint64[]";
    readonly 106: "uint72[]";
    readonly 107: "uint80[]";
    readonly 108: "uint88[]";
    readonly 109: "uint96[]";
    readonly 110: "uint104[]";
    readonly 111: "uint112[]";
    readonly 112: "uint120[]";
    readonly 113: "uint128[]";
    readonly 114: "uint136[]";
    readonly 115: "uint144[]";
    readonly 116: "uint152[]";
    readonly 117: "uint160[]";
    readonly 118: "uint168[]";
    readonly 119: "uint176[]";
    readonly 120: "uint184[]";
    readonly 121: "uint192[]";
    readonly 122: "uint200[]";
    readonly 123: "uint208[]";
    readonly 124: "uint216[]";
    readonly 125: "uint224[]";
    readonly 126: "uint232[]";
    readonly 127: "uint240[]";
    readonly 128: "uint248[]";
    readonly 129: "uint256[]";
    readonly 130: "int8[]";
    readonly 131: "int16[]";
    readonly 132: "int24[]";
    readonly 133: "int32[]";
    readonly 134: "int40[]";
    readonly 135: "int48[]";
    readonly 136: "int56[]";
    readonly 137: "int64[]";
    readonly 138: "int72[]";
    readonly 139: "int80[]";
    readonly 140: "int88[]";
    readonly 141: "int96[]";
    readonly 142: "int104[]";
    readonly 143: "int112[]";
    readonly 144: "int120[]";
    readonly 145: "int128[]";
    readonly 146: "int136[]";
    readonly 147: "int144[]";
    readonly 148: "int152[]";
    readonly 149: "int160[]";
    readonly 150: "int168[]";
    readonly 151: "int176[]";
    readonly 152: "int184[]";
    readonly 153: "int192[]";
    readonly 154: "int200[]";
    readonly 155: "int208[]";
    readonly 156: "int216[]";
    readonly 157: "int224[]";
    readonly 158: "int232[]";
    readonly 159: "int240[]";
    readonly 160: "int248[]";
    readonly 161: "int256[]";
    readonly 162: "bytes1[]";
    readonly 163: "bytes2[]";
    readonly 164: "bytes3[]";
    readonly 165: "bytes4[]";
    readonly 166: "bytes5[]";
    readonly 167: "bytes6[]";
    readonly 168: "bytes7[]";
    readonly 169: "bytes8[]";
    readonly 170: "bytes9[]";
    readonly 171: "bytes10[]";
    readonly 172: "bytes11[]";
    readonly 173: "bytes12[]";
    readonly 174: "bytes13[]";
    readonly 175: "bytes14[]";
    readonly 176: "bytes15[]";
    readonly 177: "bytes16[]";
    readonly 178: "bytes17[]";
    readonly 179: "bytes18[]";
    readonly 180: "bytes19[]";
    readonly 181: "bytes20[]";
    readonly 182: "bytes21[]";
    readonly 183: "bytes22[]";
    readonly 184: "bytes23[]";
    readonly 185: "bytes24[]";
    readonly 186: "bytes25[]";
    readonly 187: "bytes26[]";
    readonly 188: "bytes27[]";
    readonly 189: "bytes28[]";
    readonly 190: "bytes29[]";
    readonly 191: "bytes30[]";
    readonly 192: "bytes31[]";
    readonly 193: "bytes32[]";
    readonly 194: "bool[]";
    readonly 195: "address[]";
    readonly 196: "bytes";
    readonly 197: "string";
};

type AbiType = (typeof SchemaTypeToAbiType)[SchemaType];
declare const AbiTypes: ("string" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" | "uint168" | "uint176" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240" | "uint248" | "uint256" | "int8" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int176" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30" | "bytes31" | "bytes32" | "bool" | "address" | "uint8[]" | "uint16[]" | "uint24[]" | "uint32[]" | "uint40[]" | "uint48[]" | "uint56[]" | "uint64[]" | "uint72[]" | "uint80[]" | "uint88[]" | "uint96[]" | "uint104[]" | "uint112[]" | "uint120[]" | "uint128[]" | "uint136[]" | "uint144[]" | "uint152[]" | "uint160[]" | "uint168[]" | "uint176[]" | "uint184[]" | "uint192[]" | "uint200[]" | "uint208[]" | "uint216[]" | "uint224[]" | "uint232[]" | "uint240[]" | "uint248[]" | "uint256[]" | "int8[]" | "int16[]" | "int24[]" | "int32[]" | "int40[]" | "int48[]" | "int56[]" | "int64[]" | "int72[]" | "int80[]" | "int88[]" | "int96[]" | "int104[]" | "int112[]" | "int120[]" | "int128[]" | "int136[]" | "int144[]" | "int152[]" | "int160[]" | "int168[]" | "int176[]" | "int184[]" | "int192[]" | "int200[]" | "int208[]" | "int216[]" | "int224[]" | "int232[]" | "int240[]" | "int248[]" | "int256[]" | "bytes1[]" | "bytes2[]" | "bytes3[]" | "bytes4[]" | "bytes5[]" | "bytes6[]" | "bytes7[]" | "bytes8[]" | "bytes9[]" | "bytes10[]" | "bytes11[]" | "bytes12[]" | "bytes13[]" | "bytes14[]" | "bytes15[]" | "bytes16[]" | "bytes17[]" | "bytes18[]" | "bytes19[]" | "bytes20[]" | "bytes21[]" | "bytes22[]" | "bytes23[]" | "bytes24[]" | "bytes25[]" | "bytes26[]" | "bytes27[]" | "bytes28[]" | "bytes29[]" | "bytes30[]" | "bytes31[]" | "bytes32[]" | "bool[]" | "address[]" | "bytes")[];

type ArraySchemaType = SchemaType.UINT8_ARRAY | SchemaType.UINT16_ARRAY | SchemaType.UINT24_ARRAY | SchemaType.UINT32_ARRAY | SchemaType.UINT40_ARRAY | SchemaType.UINT48_ARRAY | SchemaType.UINT56_ARRAY | SchemaType.UINT64_ARRAY | SchemaType.UINT72_ARRAY | SchemaType.UINT80_ARRAY | SchemaType.UINT88_ARRAY | SchemaType.UINT96_ARRAY | SchemaType.UINT104_ARRAY | SchemaType.UINT112_ARRAY | SchemaType.UINT120_ARRAY | SchemaType.UINT128_ARRAY | SchemaType.UINT136_ARRAY | SchemaType.UINT144_ARRAY | SchemaType.UINT152_ARRAY | SchemaType.UINT160_ARRAY | SchemaType.UINT168_ARRAY | SchemaType.UINT176_ARRAY | SchemaType.UINT184_ARRAY | SchemaType.UINT192_ARRAY | SchemaType.UINT200_ARRAY | SchemaType.UINT208_ARRAY | SchemaType.UINT216_ARRAY | SchemaType.UINT224_ARRAY | SchemaType.UINT232_ARRAY | SchemaType.UINT240_ARRAY | SchemaType.UINT248_ARRAY | SchemaType.UINT256_ARRAY | SchemaType.INT8_ARRAY | SchemaType.INT16_ARRAY | SchemaType.INT24_ARRAY | SchemaType.INT32_ARRAY | SchemaType.INT40_ARRAY | SchemaType.INT48_ARRAY | SchemaType.INT56_ARRAY | SchemaType.INT64_ARRAY | SchemaType.INT72_ARRAY | SchemaType.INT80_ARRAY | SchemaType.INT88_ARRAY | SchemaType.INT96_ARRAY | SchemaType.INT104_ARRAY | SchemaType.INT112_ARRAY | SchemaType.INT120_ARRAY | SchemaType.INT128_ARRAY | SchemaType.INT136_ARRAY | SchemaType.INT144_ARRAY | SchemaType.INT152_ARRAY | SchemaType.INT160_ARRAY | SchemaType.INT168_ARRAY | SchemaType.INT176_ARRAY | SchemaType.INT184_ARRAY | SchemaType.INT192_ARRAY | SchemaType.INT200_ARRAY | SchemaType.INT208_ARRAY | SchemaType.INT216_ARRAY | SchemaType.INT224_ARRAY | SchemaType.INT232_ARRAY | SchemaType.INT240_ARRAY | SchemaType.INT248_ARRAY | SchemaType.INT256_ARRAY | SchemaType.BYTES1_ARRAY | SchemaType.BYTES2_ARRAY | SchemaType.BYTES3_ARRAY | SchemaType.BYTES4_ARRAY | SchemaType.BYTES5_ARRAY | SchemaType.BYTES6_ARRAY | SchemaType.BYTES7_ARRAY | SchemaType.BYTES8_ARRAY | SchemaType.BYTES9_ARRAY | SchemaType.BYTES10_ARRAY | SchemaType.BYTES11_ARRAY | SchemaType.BYTES12_ARRAY | SchemaType.BYTES13_ARRAY | SchemaType.BYTES14_ARRAY | SchemaType.BYTES15_ARRAY | SchemaType.BYTES16_ARRAY | SchemaType.BYTES17_ARRAY | SchemaType.BYTES18_ARRAY | SchemaType.BYTES19_ARRAY | SchemaType.BYTES20_ARRAY | SchemaType.BYTES21_ARRAY | SchemaType.BYTES22_ARRAY | SchemaType.BYTES23_ARRAY | SchemaType.BYTES24_ARRAY | SchemaType.BYTES25_ARRAY | SchemaType.BYTES26_ARRAY | SchemaType.BYTES27_ARRAY | SchemaType.BYTES28_ARRAY | SchemaType.BYTES29_ARRAY | SchemaType.BYTES30_ARRAY | SchemaType.BYTES31_ARRAY | SchemaType.BYTES32_ARRAY | SchemaType.BOOL_ARRAY | SchemaType.ADDRESS_ARRAY;

type DynamicSchemaType = ArraySchemaType | SchemaType.BYTES | SchemaType.STRING;

type StaticSchemaType = Exclude<SchemaType, DynamicSchemaType>;

type StaticAbiType = (typeof SchemaTypeToAbiType)[StaticSchemaType];
declare const StaticAbiTypes: StaticAbiType[];

type StaticArray = `${StaticAbiType}[${number}]`;

declare const AbiTypeToSchemaType: {
    [k: string]: SchemaType;
};

declare const SchemaTypeArrayToElement: {
    0: never;
    1: never;
    2: never;
    3: never;
    4: never;
    5: never;
    6: never;
    7: never;
    8: never;
    9: never;
    10: never;
    11: never;
    12: never;
    13: never;
    14: never;
    15: never;
    16: never;
    17: never;
    18: never;
    19: never;
    20: never;
    21: never;
    22: never;
    23: never;
    24: never;
    25: never;
    26: never;
    27: never;
    28: never;
    29: never;
    30: never;
    31: never;
    32: never;
    33: never;
    34: never;
    35: never;
    36: never;
    37: never;
    38: never;
    39: never;
    40: never;
    41: never;
    42: never;
    43: never;
    44: never;
    45: never;
    46: never;
    47: never;
    48: never;
    49: never;
    50: never;
    51: never;
    52: never;
    53: never;
    54: never;
    55: never;
    56: never;
    57: never;
    58: never;
    59: never;
    60: never;
    61: never;
    62: never;
    63: never;
    64: never;
    65: never;
    66: never;
    67: never;
    68: never;
    69: never;
    70: never;
    71: never;
    72: never;
    73: never;
    74: never;
    75: never;
    76: never;
    77: never;
    78: never;
    79: never;
    80: never;
    81: never;
    82: never;
    83: never;
    84: never;
    85: never;
    86: never;
    87: never;
    88: never;
    89: never;
    90: never;
    91: never;
    92: never;
    93: never;
    94: never;
    95: never;
    96: never;
    97: never;
    98: StaticSchemaType;
    99: StaticSchemaType;
    100: StaticSchemaType;
    101: StaticSchemaType;
    102: StaticSchemaType;
    103: StaticSchemaType;
    104: StaticSchemaType;
    105: StaticSchemaType;
    106: StaticSchemaType;
    107: StaticSchemaType;
    108: StaticSchemaType;
    109: StaticSchemaType;
    110: StaticSchemaType;
    111: StaticSchemaType;
    112: StaticSchemaType;
    113: StaticSchemaType;
    114: StaticSchemaType;
    115: StaticSchemaType;
    116: StaticSchemaType;
    117: StaticSchemaType;
    118: StaticSchemaType;
    119: StaticSchemaType;
    120: StaticSchemaType;
    121: StaticSchemaType;
    122: StaticSchemaType;
    123: StaticSchemaType;
    124: StaticSchemaType;
    125: StaticSchemaType;
    126: StaticSchemaType;
    127: StaticSchemaType;
    128: StaticSchemaType;
    129: StaticSchemaType;
    130: StaticSchemaType;
    131: StaticSchemaType;
    132: StaticSchemaType;
    133: StaticSchemaType;
    134: StaticSchemaType;
    135: StaticSchemaType;
    136: StaticSchemaType;
    137: StaticSchemaType;
    138: StaticSchemaType;
    139: StaticSchemaType;
    140: StaticSchemaType;
    141: StaticSchemaType;
    142: StaticSchemaType;
    143: StaticSchemaType;
    144: StaticSchemaType;
    145: StaticSchemaType;
    146: StaticSchemaType;
    147: StaticSchemaType;
    148: StaticSchemaType;
    149: StaticSchemaType;
    150: StaticSchemaType;
    151: StaticSchemaType;
    152: StaticSchemaType;
    153: StaticSchemaType;
    154: StaticSchemaType;
    155: StaticSchemaType;
    156: StaticSchemaType;
    157: StaticSchemaType;
    158: StaticSchemaType;
    159: StaticSchemaType;
    160: StaticSchemaType;
    161: StaticSchemaType;
    162: StaticSchemaType;
    163: StaticSchemaType;
    164: StaticSchemaType;
    165: StaticSchemaType;
    166: StaticSchemaType;
    167: StaticSchemaType;
    168: StaticSchemaType;
    169: StaticSchemaType;
    170: StaticSchemaType;
    171: StaticSchemaType;
    172: StaticSchemaType;
    173: StaticSchemaType;
    174: StaticSchemaType;
    175: StaticSchemaType;
    176: StaticSchemaType;
    177: StaticSchemaType;
    178: StaticSchemaType;
    179: StaticSchemaType;
    180: StaticSchemaType;
    181: StaticSchemaType;
    182: StaticSchemaType;
    183: StaticSchemaType;
    184: StaticSchemaType;
    185: StaticSchemaType;
    186: StaticSchemaType;
    187: StaticSchemaType;
    188: StaticSchemaType;
    189: StaticSchemaType;
    190: StaticSchemaType;
    191: StaticSchemaType;
    192: StaticSchemaType;
    193: StaticSchemaType;
    194: StaticSchemaType;
    195: StaticSchemaType;
    196: never;
    197: never;
};

/**
 * Like abitype's AbiTypeToPrimitiveType but adding support for arrays and using strings as input
 */
type AbiTypeToPrimitiveType<T extends string> = T extends `${infer StaticAbiType}[${string}]` ? StaticAbiType extends AbiType$1 ? AbiTypeToPrimitiveType$1<StaticAbiType>[] : never : T extends AbiType$1 ? AbiTypeToPrimitiveType$1<T> : never;

type SchemaTypeToPrimitiveType<S extends SchemaType> = SchemaTypeToPrimitiveTypeLookup[S];
type SchemaTypeToPrimitiveTypeLookup = {
    [SchemaType in keyof typeof SchemaTypeToAbiType]: AbiTypeToPrimitiveType<(typeof SchemaTypeToAbiType)[SchemaType]>;
};

/**
 * Encode a table schema into a bytes32 hex string
 * Port of `Schema.sol` from `@latticexyz/store`
 * @param schema The schema to encode SchemaType[]
 * @returns The encoded schema as a 32 byte hex string
 * @deprecated use `schemaToHex` from `protocol-parser` instead
 */
declare function encodeSchema(schema: SchemaType[]): Uint8Array;

declare function getStaticByteLength(schemaType: SchemaType): number;

/**
 * Return a value corresponding to the Solidity default value for a given abi type
 */
declare function getAbiTypeDefaultValue<T extends string>(abiType: T): AbiTypeToPrimitiveType<T>;

export { AbiType, AbiTypeToPrimitiveType, AbiTypeToSchemaType, AbiTypes, ArraySchemaType, DynamicSchemaType, SchemaType, SchemaTypeArrayToElement, SchemaTypeToAbiType, SchemaTypeToPrimitiveType, StaticAbiType, StaticAbiTypes, StaticArray, StaticSchemaType, encodeSchema, getAbiTypeDefaultValue, getStaticByteLength };
