import { Hex } from 'viem';

declare const schemaAbiTypes: readonly ["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address", "uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"];
type SchemaAbiType = (typeof schemaAbiTypes)[number];
declare const staticAbiTypes: readonly ["uint8", "uint16", "uint24", "uint32", "uint40", "uint48", "uint56", "uint64", "uint72", "uint80", "uint88", "uint96", "uint104", "uint112", "uint120", "uint128", "uint136", "uint144", "uint152", "uint160", "uint168", "uint176", "uint184", "uint192", "uint200", "uint208", "uint216", "uint224", "uint232", "uint240", "uint248", "uint256", "int8", "int16", "int24", "int32", "int40", "int48", "int56", "int64", "int72", "int80", "int88", "int96", "int104", "int112", "int120", "int128", "int136", "int144", "int152", "int160", "int168", "int176", "int184", "int192", "int200", "int208", "int216", "int224", "int232", "int240", "int248", "int256", "bytes1", "bytes2", "bytes3", "bytes4", "bytes5", "bytes6", "bytes7", "bytes8", "bytes9", "bytes10", "bytes11", "bytes12", "bytes13", "bytes14", "bytes15", "bytes16", "bytes17", "bytes18", "bytes19", "bytes20", "bytes21", "bytes22", "bytes23", "bytes24", "bytes25", "bytes26", "bytes27", "bytes28", "bytes29", "bytes30", "bytes31", "bytes32", "bool", "address"];
declare const dynamicAbiTypes: readonly ["uint8[]", "uint16[]", "uint24[]", "uint32[]", "uint40[]", "uint48[]", "uint56[]", "uint64[]", "uint72[]", "uint80[]", "uint88[]", "uint96[]", "uint104[]", "uint112[]", "uint120[]", "uint128[]", "uint136[]", "uint144[]", "uint152[]", "uint160[]", "uint168[]", "uint176[]", "uint184[]", "uint192[]", "uint200[]", "uint208[]", "uint216[]", "uint224[]", "uint232[]", "uint240[]", "uint248[]", "uint256[]", "int8[]", "int16[]", "int24[]", "int32[]", "int40[]", "int48[]", "int56[]", "int64[]", "int72[]", "int80[]", "int88[]", "int96[]", "int104[]", "int112[]", "int120[]", "int128[]", "int136[]", "int144[]", "int152[]", "int160[]", "int168[]", "int176[]", "int184[]", "int192[]", "int200[]", "int208[]", "int216[]", "int224[]", "int232[]", "int240[]", "int248[]", "int256[]", "bytes1[]", "bytes2[]", "bytes3[]", "bytes4[]", "bytes5[]", "bytes6[]", "bytes7[]", "bytes8[]", "bytes9[]", "bytes10[]", "bytes11[]", "bytes12[]", "bytes13[]", "bytes14[]", "bytes15[]", "bytes16[]", "bytes17[]", "bytes18[]", "bytes19[]", "bytes20[]", "bytes21[]", "bytes22[]", "bytes23[]", "bytes24[]", "bytes25[]", "bytes26[]", "bytes27[]", "bytes28[]", "bytes29[]", "bytes30[]", "bytes31[]", "bytes32[]", "bool[]", "address[]", "bytes", "string"];
type StaticAbiType = (typeof staticAbiTypes)[number];
type DynamicAbiType = (typeof dynamicAbiTypes)[number];
declare function isSchemaAbiType(abiType: unknown): abiType is SchemaAbiType;

type ArrayAbiTypeToStaticAbiType<T extends string> = T extends `${infer StaticAbiType}[]` ? StaticAbiType : never;
declare function isArrayAbiType<T extends `${StaticAbiType}[]`>(abiType: string): abiType is T;
declare function arrayAbiTypeToStaticAbiType<T extends `${StaticAbiType}[]`>(abiType: T): ArrayAbiTypeToStaticAbiType<T>;

type LiteralToBroad<T> = T extends Readonly<Array<infer Element>> ? readonly LiteralToBroad<Element>[] : T extends Array<infer Element> ? LiteralToBroad<Element>[] : T extends number ? number : T extends bigint ? bigint : T extends Hex ? Hex : T extends boolean ? boolean : T extends string ? string : never;

type DynamicPrimitiveType = readonly number[] | readonly bigint[] | readonly Hex[] | readonly boolean[] | Hex | string;
declare const dynamicAbiTypeToDefaultValue: {
    readonly "uint8[]": readonly number[];
    readonly "uint16[]": readonly number[];
    readonly "uint24[]": readonly number[];
    readonly "uint32[]": readonly number[];
    readonly "uint40[]": readonly number[];
    readonly "uint48[]": readonly number[];
    readonly "uint56[]": readonly bigint[];
    readonly "uint64[]": readonly bigint[];
    readonly "uint72[]": readonly bigint[];
    readonly "uint80[]": readonly bigint[];
    readonly "uint88[]": readonly bigint[];
    readonly "uint96[]": readonly bigint[];
    readonly "uint104[]": readonly bigint[];
    readonly "uint112[]": readonly bigint[];
    readonly "uint120[]": readonly bigint[];
    readonly "uint128[]": readonly bigint[];
    readonly "uint136[]": readonly bigint[];
    readonly "uint144[]": readonly bigint[];
    readonly "uint152[]": readonly bigint[];
    readonly "uint160[]": readonly bigint[];
    readonly "uint168[]": readonly bigint[];
    readonly "uint176[]": readonly bigint[];
    readonly "uint184[]": readonly bigint[];
    readonly "uint192[]": readonly bigint[];
    readonly "uint200[]": readonly bigint[];
    readonly "uint208[]": readonly bigint[];
    readonly "uint216[]": readonly bigint[];
    readonly "uint224[]": readonly bigint[];
    readonly "uint232[]": readonly bigint[];
    readonly "uint240[]": readonly bigint[];
    readonly "uint248[]": readonly bigint[];
    readonly "uint256[]": readonly bigint[];
    readonly "int8[]": readonly number[];
    readonly "int16[]": readonly number[];
    readonly "int24[]": readonly number[];
    readonly "int32[]": readonly number[];
    readonly "int40[]": readonly number[];
    readonly "int48[]": readonly number[];
    readonly "int56[]": readonly bigint[];
    readonly "int64[]": readonly bigint[];
    readonly "int72[]": readonly bigint[];
    readonly "int80[]": readonly bigint[];
    readonly "int88[]": readonly bigint[];
    readonly "int96[]": readonly bigint[];
    readonly "int104[]": readonly bigint[];
    readonly "int112[]": readonly bigint[];
    readonly "int120[]": readonly bigint[];
    readonly "int128[]": readonly bigint[];
    readonly "int136[]": readonly bigint[];
    readonly "int144[]": readonly bigint[];
    readonly "int152[]": readonly bigint[];
    readonly "int160[]": readonly bigint[];
    readonly "int168[]": readonly bigint[];
    readonly "int176[]": readonly bigint[];
    readonly "int184[]": readonly bigint[];
    readonly "int192[]": readonly bigint[];
    readonly "int200[]": readonly bigint[];
    readonly "int208[]": readonly bigint[];
    readonly "int216[]": readonly bigint[];
    readonly "int224[]": readonly bigint[];
    readonly "int232[]": readonly bigint[];
    readonly "int240[]": readonly bigint[];
    readonly "int248[]": readonly bigint[];
    readonly "int256[]": readonly bigint[];
    readonly "bytes1[]": readonly `0x${string}`[];
    readonly "bytes2[]": readonly `0x${string}`[];
    readonly "bytes3[]": readonly `0x${string}`[];
    readonly "bytes4[]": readonly `0x${string}`[];
    readonly "bytes5[]": readonly `0x${string}`[];
    readonly "bytes6[]": readonly `0x${string}`[];
    readonly "bytes7[]": readonly `0x${string}`[];
    readonly "bytes8[]": readonly `0x${string}`[];
    readonly "bytes9[]": readonly `0x${string}`[];
    readonly "bytes10[]": readonly `0x${string}`[];
    readonly "bytes11[]": readonly `0x${string}`[];
    readonly "bytes12[]": readonly `0x${string}`[];
    readonly "bytes13[]": readonly `0x${string}`[];
    readonly "bytes14[]": readonly `0x${string}`[];
    readonly "bytes15[]": readonly `0x${string}`[];
    readonly "bytes16[]": readonly `0x${string}`[];
    readonly "bytes17[]": readonly `0x${string}`[];
    readonly "bytes18[]": readonly `0x${string}`[];
    readonly "bytes19[]": readonly `0x${string}`[];
    readonly "bytes20[]": readonly `0x${string}`[];
    readonly "bytes21[]": readonly `0x${string}`[];
    readonly "bytes22[]": readonly `0x${string}`[];
    readonly "bytes23[]": readonly `0x${string}`[];
    readonly "bytes24[]": readonly `0x${string}`[];
    readonly "bytes25[]": readonly `0x${string}`[];
    readonly "bytes26[]": readonly `0x${string}`[];
    readonly "bytes27[]": readonly `0x${string}`[];
    readonly "bytes28[]": readonly `0x${string}`[];
    readonly "bytes29[]": readonly `0x${string}`[];
    readonly "bytes30[]": readonly `0x${string}`[];
    readonly "bytes31[]": readonly `0x${string}`[];
    readonly "bytes32[]": readonly `0x${string}`[];
    readonly "bool[]": readonly boolean[];
    readonly "address[]": readonly `0x${string}`[];
    readonly bytes: "0x";
    readonly string: "";
};
type DynamicAbiTypeToPrimitiveType<TDynamicAbiType extends DynamicAbiType = DynamicAbiType> = LiteralToBroad<(typeof dynamicAbiTypeToDefaultValue)[TDynamicAbiType]>;
declare function isDynamicAbiType(abiType: string): abiType is DynamicAbiType;

declare const schemaAbiTypeToDefaultValue: {
    readonly "uint8[]": readonly number[];
    readonly "uint16[]": readonly number[];
    readonly "uint24[]": readonly number[];
    readonly "uint32[]": readonly number[];
    readonly "uint40[]": readonly number[];
    readonly "uint48[]": readonly number[];
    readonly "uint56[]": readonly bigint[];
    readonly "uint64[]": readonly bigint[];
    readonly "uint72[]": readonly bigint[];
    readonly "uint80[]": readonly bigint[];
    readonly "uint88[]": readonly bigint[];
    readonly "uint96[]": readonly bigint[];
    readonly "uint104[]": readonly bigint[];
    readonly "uint112[]": readonly bigint[];
    readonly "uint120[]": readonly bigint[];
    readonly "uint128[]": readonly bigint[];
    readonly "uint136[]": readonly bigint[];
    readonly "uint144[]": readonly bigint[];
    readonly "uint152[]": readonly bigint[];
    readonly "uint160[]": readonly bigint[];
    readonly "uint168[]": readonly bigint[];
    readonly "uint176[]": readonly bigint[];
    readonly "uint184[]": readonly bigint[];
    readonly "uint192[]": readonly bigint[];
    readonly "uint200[]": readonly bigint[];
    readonly "uint208[]": readonly bigint[];
    readonly "uint216[]": readonly bigint[];
    readonly "uint224[]": readonly bigint[];
    readonly "uint232[]": readonly bigint[];
    readonly "uint240[]": readonly bigint[];
    readonly "uint248[]": readonly bigint[];
    readonly "uint256[]": readonly bigint[];
    readonly "int8[]": readonly number[];
    readonly "int16[]": readonly number[];
    readonly "int24[]": readonly number[];
    readonly "int32[]": readonly number[];
    readonly "int40[]": readonly number[];
    readonly "int48[]": readonly number[];
    readonly "int56[]": readonly bigint[];
    readonly "int64[]": readonly bigint[];
    readonly "int72[]": readonly bigint[];
    readonly "int80[]": readonly bigint[];
    readonly "int88[]": readonly bigint[];
    readonly "int96[]": readonly bigint[];
    readonly "int104[]": readonly bigint[];
    readonly "int112[]": readonly bigint[];
    readonly "int120[]": readonly bigint[];
    readonly "int128[]": readonly bigint[];
    readonly "int136[]": readonly bigint[];
    readonly "int144[]": readonly bigint[];
    readonly "int152[]": readonly bigint[];
    readonly "int160[]": readonly bigint[];
    readonly "int168[]": readonly bigint[];
    readonly "int176[]": readonly bigint[];
    readonly "int184[]": readonly bigint[];
    readonly "int192[]": readonly bigint[];
    readonly "int200[]": readonly bigint[];
    readonly "int208[]": readonly bigint[];
    readonly "int216[]": readonly bigint[];
    readonly "int224[]": readonly bigint[];
    readonly "int232[]": readonly bigint[];
    readonly "int240[]": readonly bigint[];
    readonly "int248[]": readonly bigint[];
    readonly "int256[]": readonly bigint[];
    readonly "bytes1[]": readonly `0x${string}`[];
    readonly "bytes2[]": readonly `0x${string}`[];
    readonly "bytes3[]": readonly `0x${string}`[];
    readonly "bytes4[]": readonly `0x${string}`[];
    readonly "bytes5[]": readonly `0x${string}`[];
    readonly "bytes6[]": readonly `0x${string}`[];
    readonly "bytes7[]": readonly `0x${string}`[];
    readonly "bytes8[]": readonly `0x${string}`[];
    readonly "bytes9[]": readonly `0x${string}`[];
    readonly "bytes10[]": readonly `0x${string}`[];
    readonly "bytes11[]": readonly `0x${string}`[];
    readonly "bytes12[]": readonly `0x${string}`[];
    readonly "bytes13[]": readonly `0x${string}`[];
    readonly "bytes14[]": readonly `0x${string}`[];
    readonly "bytes15[]": readonly `0x${string}`[];
    readonly "bytes16[]": readonly `0x${string}`[];
    readonly "bytes17[]": readonly `0x${string}`[];
    readonly "bytes18[]": readonly `0x${string}`[];
    readonly "bytes19[]": readonly `0x${string}`[];
    readonly "bytes20[]": readonly `0x${string}`[];
    readonly "bytes21[]": readonly `0x${string}`[];
    readonly "bytes22[]": readonly `0x${string}`[];
    readonly "bytes23[]": readonly `0x${string}`[];
    readonly "bytes24[]": readonly `0x${string}`[];
    readonly "bytes25[]": readonly `0x${string}`[];
    readonly "bytes26[]": readonly `0x${string}`[];
    readonly "bytes27[]": readonly `0x${string}`[];
    readonly "bytes28[]": readonly `0x${string}`[];
    readonly "bytes29[]": readonly `0x${string}`[];
    readonly "bytes30[]": readonly `0x${string}`[];
    readonly "bytes31[]": readonly `0x${string}`[];
    readonly "bytes32[]": readonly `0x${string}`[];
    readonly "bool[]": readonly boolean[];
    readonly "address[]": readonly `0x${string}`[];
    readonly bytes: "0x";
    readonly string: "";
    readonly uint8: 0;
    readonly uint16: 0;
    readonly uint24: 0;
    readonly uint32: 0;
    readonly uint40: 0;
    readonly uint48: 0;
    readonly uint56: 0n;
    readonly uint64: 0n;
    readonly uint72: 0n;
    readonly uint80: 0n;
    readonly uint88: 0n;
    readonly uint96: 0n;
    readonly uint104: 0n;
    readonly uint112: 0n;
    readonly uint120: 0n;
    readonly uint128: 0n;
    readonly uint136: 0n;
    readonly uint144: 0n;
    readonly uint152: 0n;
    readonly uint160: 0n;
    readonly uint168: 0n;
    readonly uint176: 0n;
    readonly uint184: 0n;
    readonly uint192: 0n;
    readonly uint200: 0n;
    readonly uint208: 0n;
    readonly uint216: 0n;
    readonly uint224: 0n;
    readonly uint232: 0n;
    readonly uint240: 0n;
    readonly uint248: 0n;
    readonly uint256: 0n;
    readonly int8: 0;
    readonly int16: 0;
    readonly int24: 0;
    readonly int32: 0;
    readonly int40: 0;
    readonly int48: 0;
    readonly int56: 0n;
    readonly int64: 0n;
    readonly int72: 0n;
    readonly int80: 0n;
    readonly int88: 0n;
    readonly int96: 0n;
    readonly int104: 0n;
    readonly int112: 0n;
    readonly int120: 0n;
    readonly int128: 0n;
    readonly int136: 0n;
    readonly int144: 0n;
    readonly int152: 0n;
    readonly int160: 0n;
    readonly int168: 0n;
    readonly int176: 0n;
    readonly int184: 0n;
    readonly int192: 0n;
    readonly int200: 0n;
    readonly int208: 0n;
    readonly int216: 0n;
    readonly int224: 0n;
    readonly int232: 0n;
    readonly int240: 0n;
    readonly int248: 0n;
    readonly int256: 0n;
    readonly bytes1: "0x00";
    readonly bytes2: "0x0000";
    readonly bytes3: "0x000000";
    readonly bytes4: "0x00000000";
    readonly bytes5: "0x0000000000";
    readonly bytes6: "0x000000000000";
    readonly bytes7: "0x00000000000000";
    readonly bytes8: "0x0000000000000000";
    readonly bytes9: "0x000000000000000000";
    readonly bytes10: "0x00000000000000000000";
    readonly bytes11: "0x0000000000000000000000";
    readonly bytes12: "0x000000000000000000000000";
    readonly bytes13: "0x00000000000000000000000000";
    readonly bytes14: "0x0000000000000000000000000000";
    readonly bytes15: "0x000000000000000000000000000000";
    readonly bytes16: "0x00000000000000000000000000000000";
    readonly bytes17: "0x0000000000000000000000000000000000";
    readonly bytes18: "0x000000000000000000000000000000000000";
    readonly bytes19: "0x00000000000000000000000000000000000000";
    readonly bytes20: "0x0000000000000000000000000000000000000000";
    readonly bytes21: "0x000000000000000000000000000000000000000000";
    readonly bytes22: "0x00000000000000000000000000000000000000000000";
    readonly bytes23: "0x0000000000000000000000000000000000000000000000";
    readonly bytes24: "0x000000000000000000000000000000000000000000000000";
    readonly bytes25: "0x00000000000000000000000000000000000000000000000000";
    readonly bytes26: "0x0000000000000000000000000000000000000000000000000000";
    readonly bytes27: "0x000000000000000000000000000000000000000000000000000000";
    readonly bytes28: "0x00000000000000000000000000000000000000000000000000000000";
    readonly bytes29: "0x0000000000000000000000000000000000000000000000000000000000";
    readonly bytes30: "0x000000000000000000000000000000000000000000000000000000000000";
    readonly bytes31: "0x00000000000000000000000000000000000000000000000000000000000000";
    readonly bytes32: "0x0000000000000000000000000000000000000000000000000000000000000000";
    readonly bool: false;
    readonly address: "0x0000000000000000000000000000000000000000";
};

type StaticPrimitiveType = number | bigint | boolean | Hex;
declare const staticAbiTypeToDefaultValue: {
    readonly uint8: 0;
    readonly uint16: 0;
    readonly uint24: 0;
    readonly uint32: 0;
    readonly uint40: 0;
    readonly uint48: 0;
    readonly uint56: 0n;
    readonly uint64: 0n;
    readonly uint72: 0n;
    readonly uint80: 0n;
    readonly uint88: 0n;
    readonly uint96: 0n;
    readonly uint104: 0n;
    readonly uint112: 0n;
    readonly uint120: 0n;
    readonly uint128: 0n;
    readonly uint136: 0n;
    readonly uint144: 0n;
    readonly uint152: 0n;
    readonly uint160: 0n;
    readonly uint168: 0n;
    readonly uint176: 0n;
    readonly uint184: 0n;
    readonly uint192: 0n;
    readonly uint200: 0n;
    readonly uint208: 0n;
    readonly uint216: 0n;
    readonly uint224: 0n;
    readonly uint232: 0n;
    readonly uint240: 0n;
    readonly uint248: 0n;
    readonly uint256: 0n;
    readonly int8: 0;
    readonly int16: 0;
    readonly int24: 0;
    readonly int32: 0;
    readonly int40: 0;
    readonly int48: 0;
    readonly int56: 0n;
    readonly int64: 0n;
    readonly int72: 0n;
    readonly int80: 0n;
    readonly int88: 0n;
    readonly int96: 0n;
    readonly int104: 0n;
    readonly int112: 0n;
    readonly int120: 0n;
    readonly int128: 0n;
    readonly int136: 0n;
    readonly int144: 0n;
    readonly int152: 0n;
    readonly int160: 0n;
    readonly int168: 0n;
    readonly int176: 0n;
    readonly int184: 0n;
    readonly int192: 0n;
    readonly int200: 0n;
    readonly int208: 0n;
    readonly int216: 0n;
    readonly int224: 0n;
    readonly int232: 0n;
    readonly int240: 0n;
    readonly int248: 0n;
    readonly int256: 0n;
    readonly bytes1: "0x00";
    readonly bytes2: "0x0000";
    readonly bytes3: "0x000000";
    readonly bytes4: "0x00000000";
    readonly bytes5: "0x0000000000";
    readonly bytes6: "0x000000000000";
    readonly bytes7: "0x00000000000000";
    readonly bytes8: "0x0000000000000000";
    readonly bytes9: "0x000000000000000000";
    readonly bytes10: "0x00000000000000000000";
    readonly bytes11: "0x0000000000000000000000";
    readonly bytes12: "0x000000000000000000000000";
    readonly bytes13: "0x00000000000000000000000000";
    readonly bytes14: "0x0000000000000000000000000000";
    readonly bytes15: "0x000000000000000000000000000000";
    readonly bytes16: "0x00000000000000000000000000000000";
    readonly bytes17: "0x0000000000000000000000000000000000";
    readonly bytes18: "0x000000000000000000000000000000000000";
    readonly bytes19: "0x00000000000000000000000000000000000000";
    readonly bytes20: "0x0000000000000000000000000000000000000000";
    readonly bytes21: "0x000000000000000000000000000000000000000000";
    readonly bytes22: "0x00000000000000000000000000000000000000000000";
    readonly bytes23: "0x0000000000000000000000000000000000000000000000";
    readonly bytes24: "0x000000000000000000000000000000000000000000000000";
    readonly bytes25: "0x00000000000000000000000000000000000000000000000000";
    readonly bytes26: "0x0000000000000000000000000000000000000000000000000000";
    readonly bytes27: "0x000000000000000000000000000000000000000000000000000000";
    readonly bytes28: "0x00000000000000000000000000000000000000000000000000000000";
    readonly bytes29: "0x0000000000000000000000000000000000000000000000000000000000";
    readonly bytes30: "0x000000000000000000000000000000000000000000000000000000000000";
    readonly bytes31: "0x00000000000000000000000000000000000000000000000000000000000000";
    readonly bytes32: "0x0000000000000000000000000000000000000000000000000000000000000000";
    readonly bool: false;
    readonly address: "0x0000000000000000000000000000000000000000";
};
type StaticAbiTypeToPrimitiveType<TStaticAbiType extends StaticAbiType = StaticAbiType> = LiteralToBroad<(typeof staticAbiTypeToDefaultValue)[TStaticAbiType]>;
declare const staticAbiTypeToByteLength: {
    readonly uint8: 1;
    readonly uint16: 2;
    readonly uint24: 3;
    readonly uint32: 4;
    readonly uint40: 5;
    readonly uint48: 6;
    readonly uint56: 7;
    readonly uint64: 8;
    readonly uint72: 9;
    readonly uint80: 10;
    readonly uint88: 11;
    readonly uint96: 12;
    readonly uint104: 13;
    readonly uint112: 14;
    readonly uint120: 15;
    readonly uint128: 16;
    readonly uint136: 17;
    readonly uint144: 18;
    readonly uint152: 19;
    readonly uint160: 20;
    readonly uint168: 21;
    readonly uint176: 22;
    readonly uint184: 23;
    readonly uint192: 24;
    readonly uint200: 25;
    readonly uint208: 26;
    readonly uint216: 27;
    readonly uint224: 28;
    readonly uint232: 29;
    readonly uint240: 30;
    readonly uint248: 31;
    readonly uint256: 32;
    readonly int8: 1;
    readonly int16: 2;
    readonly int24: 3;
    readonly int32: 4;
    readonly int40: 5;
    readonly int48: 6;
    readonly int56: 7;
    readonly int64: 8;
    readonly int72: 9;
    readonly int80: 10;
    readonly int88: 11;
    readonly int96: 12;
    readonly int104: 13;
    readonly int112: 14;
    readonly int120: 15;
    readonly int128: 16;
    readonly int136: 17;
    readonly int144: 18;
    readonly int152: 19;
    readonly int160: 20;
    readonly int168: 21;
    readonly int176: 22;
    readonly int184: 23;
    readonly int192: 24;
    readonly int200: 25;
    readonly int208: 26;
    readonly int216: 27;
    readonly int224: 28;
    readonly int232: 29;
    readonly int240: 30;
    readonly int248: 31;
    readonly int256: 32;
    readonly bytes1: 1;
    readonly bytes2: 2;
    readonly bytes3: 3;
    readonly bytes4: 4;
    readonly bytes5: 5;
    readonly bytes6: 6;
    readonly bytes7: 7;
    readonly bytes8: 8;
    readonly bytes9: 9;
    readonly bytes10: 10;
    readonly bytes11: 11;
    readonly bytes12: 12;
    readonly bytes13: 13;
    readonly bytes14: 14;
    readonly bytes15: 15;
    readonly bytes16: 16;
    readonly bytes17: 17;
    readonly bytes18: 18;
    readonly bytes19: 19;
    readonly bytes20: 20;
    readonly bytes21: 21;
    readonly bytes22: 22;
    readonly bytes23: 23;
    readonly bytes24: 24;
    readonly bytes25: 25;
    readonly bytes26: 26;
    readonly bytes27: 27;
    readonly bytes28: 28;
    readonly bytes29: 29;
    readonly bytes30: 30;
    readonly bytes31: 31;
    readonly bytes32: 32;
    readonly bool: 1;
    readonly address: 20;
};
declare function isStaticAbiType(abiType: string): abiType is StaticAbiType;

type SchemaAbiTypeToPrimitiveType<T extends SchemaAbiType> = LiteralToBroad<(typeof schemaAbiTypeToDefaultValue)[T]>;

export { ArrayAbiTypeToStaticAbiType, DynamicAbiType, DynamicAbiTypeToPrimitiveType, DynamicPrimitiveType, SchemaAbiType, SchemaAbiTypeToPrimitiveType, StaticAbiType, StaticAbiTypeToPrimitiveType, StaticPrimitiveType, arrayAbiTypeToStaticAbiType, dynamicAbiTypeToDefaultValue, dynamicAbiTypes, isArrayAbiType, isDynamicAbiType, isSchemaAbiType, isStaticAbiType, schemaAbiTypeToDefaultValue, schemaAbiTypes, staticAbiTypeToByteLength, staticAbiTypeToDefaultValue, staticAbiTypes };
